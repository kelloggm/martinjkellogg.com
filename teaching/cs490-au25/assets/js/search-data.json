{"0": {
    "doc": "CS 490 (Au25)",
    "title": "Welcome to CS 490!",
    "content": "Welcome to CS 490: Guided Design in Software Engineering! This is a course about building software that satisfies stronger properties than “it works”: it’s about building software that is correct, reliable, maintainable, testable, and usable. That is, this course will teach you about how to build software well. The course is structured around giving you experience in both the theory (through readings and lectures) and the practice (through programming assignments and a large group project) of software engineering. However, this course has a strong emphasis on the practical: the assignments mirror real engineering activities, most readings are blog posts from engineers, etc. My overarching goal in this class is to expose you to how high-quality software engineering is done at the world’s best software engineering firms. On this course website, you can find: . | the syllabus, | a course calendar (which includes links to the required readings), | a staff page, | links to all assignments, | useful tutorials, and | information about exams (including old/practice exams with solutions). | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/#welcome-to-cs-490",
    "relUrl": "/#welcome-to-cs-490"
  },"1": {
    "doc": "CS 490 (Au25)",
    "title": "CS 490 (Au25)",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/",
    "relUrl": "/"
  },"2": {
    "doc": "Syllabus",
    "title": "Syllabus",
    "content": "Welcome to CS 490: Guided Design in Software Engineering! This is a course about building software that satisfies stronger properties than “it works”: it’s about building software that is correct, reliable, maintainable, testable, and usable. That is, this course will teach you about how to build software well. The course is structured around giving you experience in both the theory (through readings and lectures) and the practice (through programming assignments and a large group project) of software engineering. However, this course has a strong emphasis on the practical: the assignments mirror real engineering activities, most readings are blog posts from engineers, etc. My overarching goal in this class is to expose you to how high-quality software engineering is done at the world’s best software engineering firms. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/",
    "relUrl": "/about/"
  },"3": {
    "doc": "Syllabus",
    "title": "Course Outcomes",
    "content": "Official course outcomes: . | Students will be able to explain the major theories and methods applicable to professional software engineering. | Students will be able to design, implement and evaluate a computer-based system to meet desired needs. | Students will be able to function effectively on a team to accomplish a goal. | Students will be able to use current techniques, skills and tools necessary for computing practice. | . My course design is based additionally on these unofficial outcomes: . | Students will be able to assess the quality of software engineering being done at some future workplace | Students will be competent software engineers that I wouldn’t be worried about hiring as an engineering manager | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#course-outcomes",
    "relUrl": "/about/#course-outcomes"
  },"4": {
    "doc": "Syllabus",
    "title": "Prerequisites",
    "content": "Technically this course requires CS 280 and CS 288, which are both courses about how to program. I will assume in this course that you know how to program: that is, that if I tell you to go write some code, you’ll be able to go do it. Since this course focuses on how to program well (i.e., how to engineer software!), you first need to know how to program at all. I’ll also assume some familiarity with command line tools, debugging, and using a search engine: I expect that if I ask you to go write code in some language you’ve never seen before, you’ll be able to find the necessary components online, find an online tutorial on the syntax, and figure out how to write that code. Put another way, I won’t teach you how to write a program: this course already assumes that you can do that. As an analogy to carpentry, classes like CS 113 teach you how to build the equivalent of a software cabinet. CS 280 and CS 288 teach you how to build something like a software shed: pretty big, but still small enough for one person to do on their own by combining the skills they learned building cabinets. CS 490 is about the equivalent of building a software high-rise: not only is it more than a single-person job, but also there’s lots of other things you need to worry about that don’t come up when you’re building a shed. The first homework assignment is due right at the drop date, and is intended to let you check that you have the basic skills that will be needed for this course: it requires you to make a trivial change to a big program in a language you’ve never seen before. However, software engineering is a broad topic that requires a synthesis of knowledge, and students will benefit from almost all of the rest of the undergraduate curriculum. We will use concepts from most other courses in the curriculum, including but not limited to: CS theory (CS 341), operating systems (CS 332), algorithms (CS 435), data structures (CS 114), security (CS 351), and databases (CS 331). You don’t need to have taken these courses before you take CS 490, but I’ll bring up topics from them when they’re relevant to the course, so you’ll get more out of CS 490 if you have seen those classes first (or are taking them concurrently). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#prerequisites",
    "relUrl": "/about/#prerequisites"
  },"5": {
    "doc": "Syllabus",
    "title": "Topics",
    "content": ". | What is Software Engineering? | Software Engineering process | Version control | Code review | Programming in teams | Testing, including coverage, continuous integration, test-driven development, mutation testing, and fuzzing | Requirements and specifications | Programming languages | Build systems | Static analysis | Debugging | Architecture and design, including design patterns, microservice design, designing for security, and designing for scale | Technical debt, refactoring, and maintenance | DevOps, logging and post-mortems | Open source software | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#topics",
    "relUrl": "/about/#topics"
  },"6": {
    "doc": "Syllabus",
    "title": "Grading and Assignments",
    "content": "Your grade is composed of the following sub-scores (in no particular order): . | 15%: Participation &amp; Professionalism | 15%: Individual Assignments | 35%: Group Project | 35%: Exams (15% for the mid-term, 20% for the final) | . This class will be curved: when grading, I prefer to use the whole range available rather than scores in a tight range. That is, if an assignment is worth 10 points, I will give grades at all the points between 0 and 10. I will project your raw scores onto the final distribution twice during the semester: . | after the mid-term exam | shortly before the final exam | . You will be notified of your current projected class grade via email at each of these points. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#grading-and-assignments",
    "relUrl": "/about/#grading-and-assignments"
  },"7": {
    "doc": "Syllabus",
    "title": "Readings and Reading Responses",
    "content": "Each lecture has two kinds of readings: mandatory and “Your Choice” readings. I expect you to read mandatory readings before coming to class that day, and reading quizzes (see Participation &amp; Professionalism, below) will cover the mandatory readings only. During the semester, you must complete at least two “Your Choice” readings: one before the mid-term, and another before the final. Most “Your Choice” readings are research papers from the software engineering literature: the idea is that you will do a deeper dive on two topics that interest you. The “Your Choice” readings will be checked on the exams: see the “Your Choice” reading page. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#readings-and-reading-responses",
    "relUrl": "/about/#readings-and-reading-responses"
  },"8": {
    "doc": "Syllabus",
    "title": "Participation &amp; Professionalism",
    "content": "Your participation &amp; professionalism grade is composed of two scores. First, your Professionalism score is based on the instructors (both the professor and TAs!) impression of how well you participated in class, with deductions for distracting other students and credit for asking and answering questions (either in person or on the course discussion board). Professionalism during the project (especially in interactions with your group’s TA mentor) is also a major component. Second, your Participation score is based on reading quizzes (about topics from the mandatory readings only - quizzes will never cover “Your Choice” readings) at the beginning of most lectures. You get half credit on these quizzes just for being there, and half credit for answering the reading questions correctly (the questions are supposed to be easy if you did the reading). For full participation, you need to get at least a score of 70% on all quizzes over the whole semester (this gives you space to e.g., miss a reading quiz because you were sick or have a family emergency - there are no excuses for missing reading quizzes). Put another way, you can miss up to 30% of the reading quiz points and still get full participation points. These policies are designed to encourage you to come to class. A big part of the goal of this class is to help you develop an intuition for what good software engineering looks like, and without coming to class you won’t get the full benefit of that intuition. Remote Participation . Generally this class does not support remote participation: teaching is much more effective, in my experience, when everyone is physically present. However, I understand that sometimes you are sick, traveling, or otherwise unable to come to class. I will arrange for remote participation in any particular lecture as long as you request it at least one hour in advance (if you’re sick or in some other emergency) or 24 hours in advance (if you’re traveling or otherwise planning to be unable to come to class). Notify the instructor via email if you need to participate in a particular class remotely. Asking Questions . There is a course Discord server which you can use to ask (and answer) questions about any of the course topics or for help with the homework. Participating on Discord is optional, but if you do participate in a productive manner (especially by answering other student’s questions!), it will have a positive impact on your participation score. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#participation--professionalism",
    "relUrl": "/about/#participation--professionalism"
  },"9": {
    "doc": "Syllabus",
    "title": "Course Project (both Individual and Group)",
    "content": "The assignments and project for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we’ll be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. At the end of the semester, the instructors and TAs will evaluate all of the student projects, and select the best (in terms of usability, code quality, test suite quality, and overall design) to merge into the open source Covey.Town codebase on GitHub repository. No additional course credit will be awarded to these teams, but these students will have the opportunity to receive public recognition for their project (in the form of a pull request merged into our repository and acknowledgments in the project’s contributors list). The project will provide hands-on experience to complement the skills taught in this class, requiring students to be able to: . | Work effectively in a small team | Enumerate and prioritize development tasks | Propose, design, implement and test a new feature in an existing non-toy software application | Write code that their team members can read and review | Review teammates’ code | Analyze a proposed software architecture | Use relevant software tools, such as: . | TypeScript | Visual Studio Code (or similar IDE) | Git | Mocha and Jest | Twilio’s Programmable Video API | Postman | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#course-project-both-individual-and-group",
    "relUrl": "/about/#course-project-both-individual-and-group"
  },"10": {
    "doc": "Syllabus",
    "title": "Exams",
    "content": "There are two exams in this course: . | a mid-term, which is held in class about halfway through the semester (worth 10% of your course grade) | a final exam, which is held during the university-scheduled final exam slot (worth 15% of your course grade) | . Both exams will cover a range of topics discussed in lecture and/or in the mandatory readings, from any time during the semester up to the point when the exam is held. The exam will be comprehensive, covering many of the topics we discuss; I may ask about anything we covered in class or that you were supposed to read. The exam will be conducted in person. Contact the course staff privately via email if you are not able to attend for any reason (e.g., you are sick or need special accommodations) and we will arrange an alternative. See the exams page for more information. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#exams",
    "relUrl": "/about/#exams"
  },"11": {
    "doc": "Syllabus",
    "title": "Collaboration Policy",
    "content": "Collaboration is generally encouraged in this course, as is consulting online resources. You are permitted to copy small amounts of code from any source except someone else’s copy of an assignment, as long as you cite your source. “someone else’s copy of an assignment” also includes students not currently enrolled in the course - e.g., students who took (or are taking) this class in previous semesters or took classes that used similar individual projects at other institutions. To make this more clear, here are some examples of acceptable and unacceptable collaboration on a programming assignment in this course: . Acceptable collaborations: . | Discuss problems/solutions/anything with any number of other students (as long as you don’t look at each other’s code). | Copy a short (about 10 lines or fewer - use your judgment) snippet from stackoverflow.com or a similar source, as long as you include a comment with the source URL. | Copy code written by one of your teammates during the group project for another part of the group project. | Copy code from the output of a generative AI tool such as ChatGPT that you prompted yourself, if you include a link to a record of your interaction with the model (e.g., ChatGPT’s “share” feature) as a code comment. | . Unacceptable collaborations: . | Copy code directly from another student on an individual project. | Copy code from another group on a group project. | Copy a significant portion (more than about 10 lines of code or a single method - use your judgment) of your assignment from the internet, even if you cite your source. | Copy a short snippet from the internet without citing your source. | Copy code from the output of a generative AI tool (such as ChatGPT) without citing your source | Copy code from the output of a generative AI tool prompted by someone other than you (or your teammates, for the group project) | . These rules are intended to mimic what is acceptable in industry when working as a software engineer: using the resources available to you, such as your teammates and the wider internet, is always allowed. But, it would be illegal to copy code from a competing company working on a similar product. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#collaboration-policy",
    "relUrl": "/about/#collaboration-policy"
  },"12": {
    "doc": "Syllabus",
    "title": "Consequences of Violating the Collaboration Policy",
    "content": "(From the University) . “Academic Integrity is the cornerstone of higher education and is central to the ideals of this course and the university. Cheating is strictly prohibited and devalues the degree that you are working on. As a member of the NJIT community, it is your responsibility to protect your educational investment by knowing and following the academic code of integrity policy that is found at: http://www5.njit.edu/policies/sites/policies/files/academic-integrity-code.pdf. Please note that it is my professional obligation and responsibility to report any academic misconduct to the Dean of Students Office. Any student found in violation of the code by cheating, plagiarizing or using any online software inappropriately will result in disciplinary action. This may include a failing grade of F, and/or suspension or dismissal from the university. If you have any questions about the code of Academic Integrity, please contact the Dean of Students Office at dos@njit.edu” . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#consequences-of-violating-the-collaboration-policy",
    "relUrl": "/about/#consequences-of-violating-the-collaboration-policy"
  },"13": {
    "doc": "Syllabus",
    "title": "Late Policy",
    "content": "All deadlines are final; no late work will be accepted for credit. We are always happy to give you feedback on late work if you contact us by email. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#late-policy",
    "relUrl": "/about/#late-policy"
  },"14": {
    "doc": "Syllabus",
    "title": "Acknowledgments",
    "content": "This course is heavily indebted to a number of other courses in software engineering at other universities, especially: . | Jon Bell’s CS 4530 at Northeastern (special thanks to Jon and his colleagues for their permission to re-use the Covey.Town project materials.) | Wes Weimer’s EECS 481 at the University of Michigan | Michael Ernst’s CSE 403 at the University of Washington | . As a student, if you’re looking for more materials (or just a different perspective) on any of the topics we cover, you might start with those (excellent) courses. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/about/#acknowledgments",
    "relUrl": "/about/#acknowledgments"
  },"15": {
    "doc": "Calendar",
    "title": "Calendar",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/",
    "relUrl": "/calendar/"
  },"16": {
    "doc": "Calendar",
    "title": "Week 1",
    "content": "Sep 1 No Class (Labor Day) Totally Optional, For Fun Readings: Gross’ The Grug Brained Developer and Kingsbury’s Reversing the technical interview Sep 3 Introduction Mandatory reading: the Individual Project 0 Specification and the syllabus (No reading quiz today, but these are fair game for any subsequent reading quiz.) Your Choice reading: Brooks’ No Silver Bullet . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-1",
    "relUrl": "/calendar/#week-1"
  },"17": {
    "doc": "Calendar",
    "title": "Week 2",
    "content": "Sep 8 Individual Project 0 due Sep 8 Code-level Design Mandatory reading: Spolsky’s The Joel Test (note that this article is from 2000, so the examples are a little dated), Gransee’s Opinions on Opinionated Formatters, the Prettier team’s Option Philosophy, and Wikipedia’s Law of Triviality. Your Choice reading: Ajami et al.’s Syntax, predicates, idioms — what really affects code complexity? . Sep 10 Reading Code Mandatory reading: Atwood’s Learn to Read the Source, Luke, Coleman’s How to quickly and effectively read other people’s code, and the Individual Project 1 Specification Your Choice reading: Endres et al.’s Relating Reading, Visualization, and Coding for New Programmers: A Neuroimaging Study . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-2",
    "relUrl": "/calendar/#week-2"
  },"18": {
    "doc": "Calendar",
    "title": "Week 3",
    "content": "Sep 15 Testing (1) Mandatory reading: Shore’s The Art of Agile Development: Test-Driven Development Your Choice reading: Saff and Ernst’s An Experimental Evaluation of Continuous Testing During Development . Sep 17 Testing (2) Mandatory reading: Petrovic’s Mutation Testing and the Individual Project Proposal specification Your Choice reading: Memon et al.’s Taming Google-Scale Continuous Testing . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-3",
    "relUrl": "/calendar/#week-3"
  },"19": {
    "doc": "Calendar",
    "title": "Week 4",
    "content": "Sep 22 Individual Project 1 due Sep 22 Testing (3) Mandatory reading: SQLite’s How SQLite is Tested and the Group Project Specification. Your Choice reading: Barr et al.’s The Oracle Problem in Software Testing: A Survey . Sep 24 Version Control Mandatory reading: Ernst’s Version control concepts and best practices and Thompson’s My favourite Git commit Your Choice reading: De Rosso et al.’s Purposes, concepts, misfits, and a redesign of git . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-4",
    "relUrl": "/calendar/#week-4"
  },"20": {
    "doc": "Calendar",
    "title": "Week 5",
    "content": "Sep 29 Individual Project Proposal due Sep 29 Process Mandatory reading: The Agile Manifesto and its Twelve Principles (this should be a quick read, but I suggest you think about what it is advocating for at least a few minutes before moving onto the next article) and Santo’s “Waterfall” doesn’t mean what you think it means Your Choice reading: Anda et al.’s Variability and Reproducibility in Software Engineering: A Study of Four Companies that Developed the Same System . Oct 1 Working in Teams Mandatory reading: Fowler’s Two Pizza Team and Arguelles’ My favorite coding question to give candidates (and why) Your Choice reading: Behroozi et al.’s Hiring is Broken: What Do Developers Say About Technical Interviews? . Oct 3 Team Assignments published no later than this date. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-5",
    "relUrl": "/calendar/#week-5"
  },"21": {
    "doc": "Calendar",
    "title": "Week 6",
    "content": "Oct 6 Requirements and Specifications (1) Mandatory reading: Spolsky’s How to be a Program Manager and Ubl’s Design Docs at Google. Your Choice reading: Ernst et al.’s The Daikon system for dynamic detection of likely invariants . Oct 8 Requirements and Specifications (2) Mandatory reading: Wayne’s Using Formal Methods at Work. Your Choice reading: Lamport’s Introduction to TLA . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-6",
    "relUrl": "/calendar/#week-6"
  },"22": {
    "doc": "Calendar",
    "title": "Week 7",
    "content": "Oct 13 Project Plan due Oct 13 Code Review Mandatory reading: Google’s How to do a code review (read all six linked sub-pages in the bulleted list) Your Choice reading: Bacchelli and Bird’s Expectations, Outcomes, and Challenges Of Modern Code Review . Oct 15 Languages Mandatory reading: Howarth’s Why Discord is Switching from Go to Rust and Schwab’s Safety through Incompatibility Your Choice reading: Hoare’s Hints on Programming Language Design (shorter than it looks!) . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-7",
    "relUrl": "/calendar/#week-7"
  },"23": {
    "doc": "Calendar",
    "title": "Week 8",
    "content": "Oct 20 Build Systems Mandatory reading: Atwood’s The F5 Key Is Not a Build Process Your Choice reading: Mokhov et al.’s Build Systems à la Carte . Oct 22 Static Analysis Mandatory reading: Ayewah et al.’s Experiences Using Static Analysis to Find Bugs and Schwartz-Narbonne’s How to integrate formal proofs into software development Your Choice reading: Chapter 2 (“Abstract Interpretation”) of Ernst’s Notes on Program Analysis . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-8",
    "relUrl": "/calendar/#week-8"
  },"24": {
    "doc": "Calendar",
    "title": "Week 9",
    "content": "Oct 27 Revised Project Plan due Oct 27 Debugging (1) Mandatory reading: Zeil’s Debugging – Using Hypotheses to Track Down the Culprit and Taylor’s Debugging Your Choice reading: Ko and Myers’ Designing the WhyLine: A Debugging Interface for Asking Questions about Program Behavior . Oct 29 Debugging (2) Mandatory reading: Zeller’s Automated Debugging: Are We Close? and Alpert’s TODOs aren’t for doing Your Choice reading: Cleve and Zeller’s Locating Causes of Program Failures . Oct 31 Project Deployment Demo due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-9",
    "relUrl": "/calendar/#week-9"
  },"25": {
    "doc": "Calendar",
    "title": "Week 10",
    "content": "Nov 3 Mid-term Exam (in-class) see the exams page for old and practice exams (with keys) Nov 3 First Project Team Survey due Nov 5 Software Architecture Mandatory reading: Kästner’s Thinking Like a Software Architect and Ross’ How Architecture Diagrams Enable Better Conversations Your Choice reading: Garlan’s Software Architecture . Nov 7 Project Wizard-of-Oz Demo due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-10",
    "relUrl": "/calendar/#week-10"
  },"26": {
    "doc": "Calendar",
    "title": "Week 11",
    "content": "Nov 10 Design Patterns Mandatory reading: Fowler’s Writing Software Patterns (read up to, but not including, “Common Pattern Forms”) and Lewis and Fowler’s Microservices Your Choice reading: Kellogg et al.’s Verifying Object Construction . Nov 12 Tech debt, refactoring, and maintenance (1) Mandatory reading: Allman’s Managing Technical Debt Your Choice reading: Kim et al.’s A Field Study of Refactoring Challenges and Benefits . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-11",
    "relUrl": "/calendar/#week-11"
  },"27": {
    "doc": "Calendar",
    "title": "Week 12",
    "content": "Nov 17 Tech debt, refactoring, and maintenance (2) Mandatory reading: Spolsky’s Things you should never do, part I and Majors’ Friday Deploy Freezes Are Exactly Like Murdering Puppies Your Choice reading: Scully et al.’s Machine Learning: The High-Interest Credit Card of Technical Debt . Nov 19 DevOps (1) Mandatory reading: Sloss’ “Introduction” and Baye’s “Emergency Response” from Google’s Site Reliability Engineering Your Choice reading: Dean and Barroso’s “The Tail at Scale” . Nov 21 Project Preliminary Demo due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-12",
    "relUrl": "/calendar/#week-12"
  },"28": {
    "doc": "Calendar",
    "title": "Week 13",
    "content": "Nov 24 DevOps (2) Mandatory reading: Lunney and Lueder’s “Postmortem Culture: Learning from Failure” from Google’s Site Reliability Engineering and Luu’s “Postmortem Lessons” Your Choice reading: Xu et al.’s “Do Not Blame Users for Misconfiguration” . Nov 26 No class (Friday classes meet for Thanksgiving holiday) Nov 26 Second Project Team Survey due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-13",
    "relUrl": "/calendar/#week-13"
  },"29": {
    "doc": "Calendar",
    "title": "Week 14",
    "content": "Dec 1 Free and Open-source Software Mandatory reading: Stallman’s Why Open Source Misses the Point of Free Software and Zaitsev’s The Future of Open Source is Polarized Your Choice reading: Terrell et al.’s Gender differences and bias in open source: pull request acceptance of women versus men . Dec 3 Software Engineer Panel Mandatory reading: none, but you must submit a question by December 2 AoE Your Choice reading: none . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-14",
    "relUrl": "/calendar/#week-14"
  },"30": {
    "doc": "Calendar",
    "title": "Week 15",
    "content": "Dec 8 What is Software Engineering? Mandatory reading: Shaw’s “What makes good research in software engineering?” Your Choice reading: read 10 abstracts in the latest ICSE proceedings and make a list of words you don’t know. Then, look up at least 5 of those words and write a brief definition. Send me the list of words, the 5 definitions, and the titles of the papers whose abstracts you read over email. (The reading quiz question for this reading will cover a topic that everyone who chooses this reading has read.) . Dec 10 All group project final deliverables due Dec 10 TBD/Slack, for now Dec 12 Group project demos for the instructor must be done by this date AoE. Attendence (in-person) is required. At least one group member must bring a laptop with a working demo of your group project (running in a publicly-accessible, deployed covey.town instance). Your team can sign up for a timeslot here. Dec 13 Third Project Team Survey due Dec 13 Individual Reflection due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-15",
    "relUrl": "/calendar/#week-15"
  },"31": {
    "doc": "Calendar",
    "title": "Week 16",
    "content": "Dec 15 Final exam at 8:30-11:00am in CULMT LEC 2 Dec 18 All group project final deliverables (re-submission) due ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/calendar/#week-16",
    "relUrl": "/calendar/#week-16"
  },"32": {
    "doc": "Project Demos",
    "title": "Demos",
    "content": "Each group project team must do at least four demos of various types during the semester. Some demos will be just your group project mentor, some may be for the instructor (and your group project mentor), and at least one will be for the whole class. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html#demos",
    "relUrl": "/projects/project-demos.html#demos"
  },"33": {
    "doc": "Project Demos",
    "title": "Deployment Demo",
    "content": "Due Friday 31 October 2025, 5:30pm EST . In this demo, you’ll show that you can build and deploy covey.town on a publicly-accessible server. You’ll do this demo with just your group project mentor, during your regular standup meeting during the week of October 27-31. There are two requirements for this demo: . | you provide your group project mentor with a link that they can follow that allows them to join a covey.town instance controlled by you. | that instance contains any one visible change from the starter code (e.g., text on the login page that says “hello world” or something equally simple), to show that this version really has been modified by your team. | . There are many ways to deploy covey.town so that it is remotely accessible. The easiest is probably to set up a free-tier AWS instance (by following our guidelines) and then set it to allow incoming traffic on the appropriate ports used by covey.town; see the covey.town documentation for more details. Rubric (out of 10 points, 1% of final project grade) . There are only two possible grades for this demo: 0 or 10. Meets minimum requirements: . | Provided link leads to a running covey.town instance. | Running covey.town instance contains at least one modification that shows that your team controls it. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html#deployment-demo",
    "relUrl": "/projects/project-demos.html#deployment-demo"
  },"34": {
    "doc": "Project Demos",
    "title": "Wizard-of-Oz Demo",
    "content": "Due Friday 7 November 2025, 5:30pm EST . The next demo is the “Wizard-of-Oz” demo. In this demo, you’ll show what your project will look like when it is finished. In this demo, you don’t need to actually have any of your code working yet: instead, you’ll “fake” working code to show off your vision for your finished project. How you fake your finished project is up to you, and will probably vary quite a bit between projects. Some options include: . | using a professional design tool, such as Figma. Figma will give you a free license because you are a student. | using PowerPoint or a similar slideshow tool to build slides that look like your finished feature. You can use slide animations or transitions to show what your feature will look like in action. | doing the same using a professional animation tool, such as Adobe Animate or a similar tool | building a “paper prototype” of the feature, and manually transitioning between its states | anything else you can imagine. | . The key is that you need to convince the course staff that you’ve thought through how your feature will behave in enough detail to implement it. Aim for your demo to take about five minutes, and to showcase all of your feature’s user stories from your revised project proposal. The demo will usually occur during your regular weekly meeting with your project mentor during the week that the demo is due, which the instructor will try to attend. In the event of a conflict, the instructor will let you know the week beforehand, but it will be up to you to schedule an alternative slot that all of you, your project mentor, and the instructor can attend before the deadline. Rubric (out of 25 points, 2.5% of final project grade) . Satisfactory: . | Demo materials are professional in appearance | Demo is about five minutes long | Demo showcases all user stories from revised project proposal | Feature(s) demonstrated are plausible to implement | . Meets minimum requirements: . | Demo is between 3 and 7 minutes long | Demo showcases at least two user stories from the revised project proposal | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html#wizard-of-oz-demo",
    "relUrl": "/projects/project-demos.html#wizard-of-oz-demo"
  },"35": {
    "doc": "Project Demos",
    "title": "Preliminary Demo",
    "content": "Due Friday 21 November 2025, 5:30pm EST . By the preliminary demo, you should have a significant part of the coding for your feature completed. In this demo, you should show that at least one of the user stories from your revised project proposal is substantially complete. Focus the demo around that user story. For this demo, your code must be deployed in a covey.town instance (but the instance is permitted to be local to the demo laptop). All demonstrated feature(s) must be implemented: you may not “fake” them as you could in the Wizard-of-Oz demo. All code used in the demo must be committed to your project GitHub repository and should have been reviewed by at least one team member other than its author. Also, by this point we expect that every team member has participated in at least one code review as a code author and at least one review as a reviewer. Aim for your demo to take about five minutes. The demo will usually occur during your regular weekly meeting with your project mentor during the week that the demo is due, which the instructor will try to attend. In the event of a conflict, the instructor will let you know the week beforehand, but it will be up to you to schedule an alternative slot that all of you, your project mentor, and the instructor can attend before the deadline. Rubric (out of 40 points, 4% of final project grade) . Satisfactory: . | Demo shows a user story from the revised project proposal | Demo is fully functional (no crashes, unexplained hangs, etc.) | Code is checked into your project GitHub repository and has been through a thorough code review (note: a portion of the grade for this demo is based on the quality of your code reviews up to this point) | Code is demonstrated in a running covey.town instance | Demo takes about 5 minutes | Each team member has authored at least one PR that has been merged after a thorough code review | Each team member has participated in at least one PR as a reviewer | . Meets minimum requirements: . | Demo shows working code related to your project | Code is checked into your project GitHub, and no code was pushed directly to main without a review | Code is demonstrated in a running covey.town instance | Demo takes between 3 and 7 minutes | Each team member has contributed to the team’s GitHub repo, either as a code author or as a reviewer | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html#preliminary-demo",
    "relUrl": "/projects/project-demos.html#preliminary-demo"
  },"36": {
    "doc": "Project Demos",
    "title": "Final Demo",
    "content": "See the project deliverables page. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html#final-demo",
    "relUrl": "/projects/project-demos.html#final-demo"
  },"37": {
    "doc": "Project Demos",
    "title": "Project Demos",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-demos.html",
    "relUrl": "/projects/project-demos.html"
  },"38": {
    "doc": "Exams",
    "title": "Exams",
    "content": "My exams are generally cumulative: anything we’ve covered in the course up to the point at which you take the exam is fair game. I may also include questions about assigned mandatory readings, homework assignments, or any other class content that you are supposed to have viewed. Notably, this does not generally include the “Your Choice” readings: I don’t expect you to have read all of those, so questions about them will always offer you a choice of which reading to answer a question about. See the “Your Choice” readings page for more information about how the “Your Choice” readings will be assessed on the exams. My exam design philosophy is to aim for a wide range of question difficulties: I try to include both some questions that I think every student should get right and some questions that I think are difficult enough that only those who have deeply understood multiple concepts that we covered in class will even be able to answer them in a reasonable way, and everything in between. To help you prepare for this semester’s exams, below you can find links to exams from previous semesters, all of which have solutions (“keys”). Some of these exams cover the whole course (anything labeled “final”), so you’ll want to be careful when studying for the midterm—not everything on these exams will have been covered by then. In addition, keep in mind that the set of topics changes a bit semester-to-semester, so it’s possible that these exams include some topics that we didn’t cover, and that your exams this semester might include topics that these exams ignore. These exams are provided “as-is” to help you study, but please don’t over-rely on them. I strongly recommend that before looking at a “key” for one of these exams, you sit down and attempt the exam yourself, under something like exam conditions (quiet room, no interruptions, etc.): this will help you more to prepare for this semester’s exam than just reading the solutions. Sp23 Practice Final (key) . Sp23 Final (key) . Au23 Midterm (key) . Au23 Final (key) . Au24 Midterm (key) . Au24 Final (key) . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/exam/",
    "relUrl": "/exam/"
  },"39": {
    "doc": "How to Read a Paper (Useful for \"Your Choice\" Readings)",
    "title": "What is a research paper?",
    "content": "In computer science, original research is typically published at peer-reviewed conferences. Typically these papers have between two and ten authors, and the paper typically reports on about a person-year’s worth of work (though this can vary widely). The authors will be a mix of junior and senior researchers: anyone who contributed something “intellectually significant” to the paper is typically listed as an author. In most CS sub-disciplines (including software engineering, which is the source for most of the “Your Choice” readings), author order is indicative: the first author is usually the person who did most of the technical work (e.g., implementing the tool, running the experiments, etc.), and the last author is typically the project leader (often, but not always, the first author’s research advisor). Often, but not always, the first author is a PhD student. To be accepted at a peer-reviewed conference, a research paper must be novel: that is, it must contain some new knowledge or evidence that the research community wasn’t aware of before. This requirement impacts how they are written: a research paper must focus on the specific thing that is novel about it, rather than surveying the field as a whole (though you can find “survey” papers that give an overview of a research area, and if you need to know the current state of a sub-field, looking for a survey paper is the way to go). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/reading-papers.html#what-is-a-research-paper",
    "relUrl": "/tutorials/reading-papers.html#what-is-a-research-paper"
  },"40": {
    "doc": "How to Read a Paper (Useful for \"Your Choice\" Readings)",
    "title": "External Resources",
    "content": "I highly recommend Keshav’s How to Read a Paper if you’re not sure where to start. This short (3-page) article gives a specific strategy for attacking a research paper. I recommend Griswold’s How to Read an Engineering Research Paper. This short article is more aimed at PhD students. but it helps to explain how a research paper is structured (and might be useful to you to help understand the anatomy of a research paper). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/reading-papers.html#external-resources",
    "relUrl": "/tutorials/reading-papers.html#external-resources"
  },"41": {
    "doc": "How to Read a Paper (Useful for \"Your Choice\" Readings)",
    "title": "How to Read a Paper (Useful for \"Your Choice\" Readings)",
    "content": "Many of the readings for this course are papers from the research literature. These papers can be intimidating if you haven’t encountered them before. This page contains some suggestions on how to read a research paper, along with links to useful external resources. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/reading-papers.html",
    "relUrl": "/tutorials/reading-papers.html"
  },"42": {
    "doc": "Individual Project Proposal",
    "title": "Individual Project Proposal Due Monday 29 September 2025, 11:59pm AoE",
    "content": "All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide exactly what kind of new feature you would like to build. Your feature should be something that can be implemented within the timeframe allotted (~6 weeks, plus ~2 weeks of planning), and will be implemented in a fork of the main Covey.Town codebase. You can play with a demo deployment of the app at app.covey.town. Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks) via the individual project, and that you will have a team of three or four, we expect that the feature that you propose will be significantly more complex than the feature implemented in IP1. In this assignment, you’ll first suggest a possible project on your own via a one-page project proposal. We’ll use your proposals to help us assign teams based on both the direction of the proposals (i.e., we’ll try to group people who suggested similar projects) and the quality of the proposals (i.e., we’ll try to group people who wrote good proposals together). Hopefully, this gives you an incentive to write a good proposal! . Feel free to look at existing systems like Gather.Town, Sococo, Reslash, Screen, and Gatherly.IO for inspiration on new features to build for Covey.Town. Also see the NYTimes Magazine article The Race to Fix Fix Virtual Meetings. Examples of features that students might propose include: . | Create some new form of “Interactable” object that models something that might be found in a real conference space, such as a whiteboard or game . | if you are going to create an interactable version of some sort of game, be careful: it is easy to pick a game that’s too simple or too complex | . | Create an interface for uploading and choosing between different maps and avatars (will require also learning to use the Phaser3 API) | Create an interface for choosing between different visual styles, fonts, avatars, etc. | Add screenreader support - generate a textual representation of the map and what players can do to interact with it | Support real persistence: store data in a database (e.g. Postgres + GraphQL), allow users to register and save a profile (e.g. using Auth0) | Add direct messaging, image messaging, and other chat features | Add a working map to the town that allows you to locate (and navigate to?) other players | Integrate with some external service that will enhance the user experience (e.g., integrating with Spotify to add music to the town) | Add a virtual assistant to the town that can carry out various actions on behalf of the user via a natural language interface | Add support for advertising in the town (and potentially integrate with an external ad service like Google) | Anything else you can imagine that might be useful to a user or operator of Covey.Town | . Please note that multiple students (at this stage) or teams (at the preliminary plan stage) might choose to propose the same feature, or a variation of that same feature - this is OK. When considering project ideas, please keep in mind that you will be allowed to publicly post your project online: while your immediate audience for the project is the course staff, if you are ultimately looking for software engineering jobs or co-ops, this project can be a useful piece of your portfolio. If you build a sufficiently maintainable feature (i.e., if your project is particularly well architected and tested), we will also consider pull requests to merge your feature into the main Covey.Town codebase on GitHub, allowing you to also tell recruiters that you have contributed a feature to an open source project on GitHub. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/individual-project-proposal.html#individual-project-proposal-due-monday-29-september-2025-1159pm-aoe",
    "relUrl": "/projects/individual-project-proposal.html#individual-project-proposal-due-monday-29-september-2025-1159pm-aoe"
  },"43": {
    "doc": "Individual Project Proposal",
    "title": "Writing a One-Pager",
    "content": "There is a strict one-page limit to the length of your individual proposal. One page is very short! So, it’s critical that you use your space well. We suggest trying to answer the following questions, in this order (e.g., in one paragraph each): . | Why? What problem is your project idea trying to solve? Who will benefit if you succeed? | What? What exactly are you proposing? Can you use an analogy to some other service or tool that your audience is likely familiar with to help explain (“I want to add something like X from Y to Covey.Town” is a great way to succinctly explain a new feature!)? | How? What are the technical obstacles? Is there only one way to fix the problem that you’re trying to solve in Covey.Town, or are there alternatives (hint: the answer to this question is almost always “yes”)? Are there libraries or external tools that you know about that will make it easier to achieve something cool? | . There’s also a lot of guidance online about how to write a good one-pager, especially in a software engineering context. For example, Amazon famously starts many design meetings with one-pagers. Here are some pieces of advice that we find credible: . | “How To Write a One-Pager like an Amazonian” by Fancis Shanahan | “Microspeak: The one-pager” by Raymond Chen | “Undervalued Software Engineering Skills: Writing Well” by Gergely Orosz | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/individual-project-proposal.html#writing-a-one-pager",
    "relUrl": "/projects/individual-project-proposal.html#writing-a-one-pager"
  },"44": {
    "doc": "Individual Project Proposal",
    "title": "Rubric",
    "content": "This assignment will be graded out of 50 points. There are five subscores, for Ambition, Clarity, Rationale, Technical Challenges and Alternatives, and Writing. These are detailed below. Ambition (10 points) . This subscore represents whether your proposal is appropriately-ambitious for a four-person team of undergraduates in half of a semester. You’ll receive less than full credit if your proposal is either too ambitious or not ambitious enough: . | 10 points if your proposal is appropriately-ambitious for a four-person team of undergraduates in half of a semester | 8 points if your proposal is a bit too ambitious or a bit unambitious. For example, if there is an obvious addition to the project that would make it significantly better and you don’t include it, you might get this score. | 5 points if your proposal is viable but either much too ambitious or not nearly ambitious enough. For example, you might get this score if you propose to re-implement an indie videogame built by a one-person team over the course of years in Covey.Town in 6 weeks, or if you propose something that’s only a little more complex than IP1. | 0 points if your proposal is not viable. For example, you might get this score if you propose to re-implement a commercially-produced videogame that was developed by a team of engineers in six weeks, or if your proposal is no more ambitious than IP1. | . Clarity (10 points) . This subscore represents whether your proposal is clear to the reader. Any ambiguities in what you are proposing to do will result in deductions; the amount deducted will depend on the importance and severity of the ambiguity. Rationale (10 points) . This subscore represents whether your proposal clearly identifies why it will be valuable to users or operators of Covey.Town, and what the benefit(s) of your proposal will be. In particular, for full credit your proposal should: . | clearly distinguish between goals and non-goals | identify the target audience of your feature | make a clear argument for how the proposed feature will benefit the target audience | . Technical Challenges and Alternatives (10 points) . This subscore represents whether your proposal has engaged with the technical difficulties that you’re likely to encounter while building the proposed feature. At a high-level, we’re looking for evidence that you’ve thought the feature through. Full credit proposals can show that by doing at least one of the following: . | discussing at least one reasonable alternative to the proposed feature that would solve the same problem, and making a credible arguemnt that the proposed feature is the better option | discussing a difficult technical challenge that you expect to encounter while building the feature and a proposed solution | discussing libraries that your feature can build on to mitigate expected technical challenges | . Writing (10 points) . This subscore represents the quality of your writing. While the “quality” of writing is subjective in general, for a one-page project proposal we’re looking for the following: . | no typos | appropriate use of technical jargon | concision | . To help with concision, we recommend thinking about the “length-to-content ratio” (LCR) of your writing. That is, if it’s possible to say the same thing with fewer syllables or words, do so. A longer writeup on the idea of LCR can be found here. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/individual-project-proposal.html#rubric",
    "relUrl": "/projects/individual-project-proposal.html#rubric"
  },"45": {
    "doc": "Individual Project Proposal",
    "title": "Submission",
    "content": "Your project plan should be submitted as a single PDF in Canvas to the assignment “Individual Project Proposal.” The assignment is due by the end of September 29, AoE. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/individual-project-proposal.html#submission",
    "relUrl": "/projects/individual-project-proposal.html#submission"
  },"46": {
    "doc": "Individual Project Proposal",
    "title": "Individual Project Proposal",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/individual-project-proposal.html",
    "relUrl": "/projects/individual-project-proposal.html"
  },"47": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Introduction",
    "content": "Welcome aboard to the Covey.Town team! We’re glad that you’re here and ready to join our development team as a new software engineer. We’re building an open source virtual meeting application, and are very happy to see that we have so many new developers who can help make this application a reality. By the end of the semester, you’ll be able to propose, design, implement and test a new feature for our project. We understand that some of you may have some web development experience, but don’t expect that most of you do, and hence, have created a set of individual projects to help you get up to speed with our existing codebase and development environment. Covey.Town is a web application that consists of some code that runs in each client’s web browser, and also code that runs on a server. Users join the application in a “town”: a 2D arcade-style map with different rooms to explore. Each town is also a video call: when two players get close to each other, they can see and hear each other; there is also a text chat available within the town. Like most real-world software engineering projects, Covey.Town is not new: the project has been in development since 2021. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#introduction",
    "relUrl": "/projects/ip0.html#introduction"
  },"48": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Objectives of this Assignment",
    "content": "The objectives for this first assignment are to: . | get you familiar with the basics of Typescript and the VSC/npm ecosystem. | acquaint you with the existing codebase that will serve as the basis for the remaining individual projects in this course (and, later, the group project). | ensure that you’re a confident enough programmer to succeed in CS 490, which will regularly ask you to tackle programming tasks using tools, environments, APIs, etc., with which you are not otherwise familiar. We don’t expect that you’ve had any formal introduction to TypeScript, React, NPM, etc., before attempting this assignment: it is mainly testing your ability to figure things out on your own. | . Note that this assignment is due on the same day as the drop deadline. That is intentional: if you’re really struggling to figure out IP0, we recommend that you drop the course and return to it in a later semester when you are better prepared. Your assignment will be graded following the rubric embedded in this document. Based on past experiences, we project that this assignment could take you up to 10 hours (depending on your prior preparation), though for most students it should be quicker. We encourage you to start early so that you can post questions on Discord and attend office hours as necessary in order to ensure that you can reach Satisfactory marks across the board. This is an individual assignment. Please post any questions about this assignment on Discord. This class permits the use of generative artificial intelligence tools like ChatGPT. You’re welcome to use them on this (or any other) assignment in this class, if you want. However, be aware that the Covey.Town codebase is confusing for everyone, AI and human alike. It’s your responsibility to interpret the output of a generative AI tool; the TAs can’t and won’t help you do so. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#objectives-of-this-assignment",
    "relUrl": "/projects/ip0.html#objectives-of-this-assignment"
  },"49": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Problem Statement",
    "content": "Your high-level goal in this assignment is to get the Covey.Town codebase working on your own machine and then make one trivial change: change the background color of the label for the player to some color other than white. You’ll demonstrate success by recording yourself making the edit, restarting Covey.Town, and then showing the result after logging in. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#problem-statement",
    "relUrl": "/projects/ip0.html#problem-statement"
  },"50": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Starter Code and Details",
    "content": "The starter code is available at https://github.com/kelloggm/covey.town. We recommend that you fork this repository into your own GitHub account. To help you set up a local development environment for this class, we’ve prepared a tutorial for setting up a development environment with NodeJS, VSCode and TypeScript. Additionally, An Absolute Beginner’s Guide to Using npm can help you in getting acquainted with npm. As a reference for getting started with TypeScript, we suggest the book “Programming TypeScript” by Boris Cherny. While these resources can help, your specific setup (your OS, your hardware, whatever software is already installed on your computer, etc.) might present some unique difficulties. Figuring out how to deal with those unique difficulties is the crux of this assignment. The course staff might be able to help you, but since most problems are unique we can’t offer any guarantees. Getting Started . | Clone the [GitHub repository](https://github.com/kelloggm/covey.town](https://github.com/kelloggm/covey.town) containing the starter code. | Open the covey.town folder in VSCode. | Open up the VSCode terminal with ctrl + ~. Alternatively, you can also open a seperate terminal/cmd. Please make sure the shell is in the same folder as your package.json. | Follow the instructions in the README.md file to run the app locally. | . Your Task . Once you have the application running locally, look for the “(You)” tag: . Your objective is to change the color of the white background behind the text “(You)” to any other color. To figure out how to do that, you’ll need to look at the code! But Covey.Town has about 21,000 lines of code - you can’t read it all in a reasonable amount of time. So, you should target your search: think about what code must be involved in displaying that tag as you explore the codebase, and try to systematically narrow down the part of the system that you have to read in order to figure out where that decision is made. Searching through a codebase to find what causes a specific, easy-to-observe effect is a common software engineering activity that you’ll need to do often in this course, so it’s good to practice it right away. Once you find the relevant code, you should record yourself: . | running an unmodified copy of the app | navigating to the relevant part of the codebase and changing the color | restarting the app and demonstrating that the new color is visible | . Your recording should be no longer than one minute. You can record your screen however you like; it’s your responsibility to figure out how to do so. Consult your favorite search engine to find out how to record your screen on your operating system. Tutorials . We’ve prepared several tutorials that might be useful for this assignment (and for understanding Covey.Town generally). The most useful to look at now are probably: . | setting up a development environment with NodeJS, VSCode and TypeScript | TypeScript basics. Most of the Covey.Town codebase is written in TypeScript, so if you’re looking at the code and struggling to read it, this should be your first stop. | React basics. React is a user interface library that Covey.Town builds on. If you’re struggling to understand how Covey.Town’s graphical interface works, you might want to read this tutorial. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#starter-code-and-details",
    "relUrl": "/projects/ip0.html#starter-code-and-details"
  },"51": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Rubric",
    "content": "This assignment is “pass/fail”: you either get full credit because you’ve completed the task, or you don’t. The assignment is worth 10 points on the same scale as the other individual projects (i.e., 1/10th of the value of IP1). After this assignment is due, we will assume that everyone can run Covey.Town locally. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#rubric",
    "relUrl": "/projects/ip0.html#rubric"
  },"52": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Submission Instructions",
    "content": "Submit your assignment via Canvas. You may submit solutions as many times as you want; only the last submission before the deadline will be counted. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html#submission-instructions",
    "relUrl": "/projects/ip0.html#submission-instructions"
  },"53": {
    "doc": "Individual Project 0: Covey.Town Setup",
    "title": "Individual Project 0: Covey.Town Setup",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip0.html",
    "relUrl": "/projects/ip0.html"
  },"54": {
    "doc": "Individual Project 1",
    "title": "Objectives of this assignment",
    "content": "The objectives of this assignment are to: . | Get you familiar with the basics of TypeScript, VSCode, and the project codebase | Learn how to read and write code in TypeScript | Translate high-level requirements into code | Learn how to write unit tests with Jest | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html#objectives-of-this-assignment",
    "relUrl": "/projects/ip1.html#objectives-of-this-assignment"
  },"55": {
    "doc": "Individual Project 1",
    "title": "Assignment scenario",
    "content": "Covey.Town management has noticed a new trend among users of the Covey.Town’s Tic-Tac-Toe game: discussion of this webcomic which proposes an alternate form of Tic-Tac-Toe. Since the Tic-Tac-Toe game on Covey.Town has historically not produced good engagement metrics (it’s almost like Tic-Tac-Toe is a solved game…), your management would like to take advantage of this viral interest by implementing the proposed Tic-Tac-Toe variant in Covey.Town. You’ve been assigned to implement and test this new feature, building on the existing Tic-Tac-Toe functionality. Game specification from the webcomic in plaintext Setup Requires 3 people: 2 players and 1 \"monitor\" Each player has three private tic-tac-toe boards, which their opponent cannot see, but the monitor can. They are labeled A, B, and C. There are also 3 public tic-tac-toe boards which everyone can see. These are also labeled A, B, and C. Gameplay Players take turns writing one symbol in one square on their private board. Squares that are occupied on a private board are also occupied on the corresponding public board. Once a player draws a symbol on their private board, the monitor checks to see if their opponent has already occupied that square by writing a symbol on their private board. If the square is already occupied, the player who tried to occupy it a second time loses their turn. The symbol in that occupied square is then drawn in the corresponding square of the public board. Scoring Whenever a player gets three in a row on a board, up-down, left-right, or diagonal, they get a point. The winning board is not publicly revealed, but players may no longer play on it. Winning Whoever has the most points when no more moves are possible wins. In the Covey.Town implementation, which we’re calling “Quantum TicTacToe”, we want to permit two players to play against each other, with Covey.Town itself (i.e., your code) serving as the “monitor”. We hope that this will allow folks chattering about this variant on social media to try it out on Covey.Town (and, we hope they’ll stick around afterwards). Management thought this was high-priority, and so assigned a trusted senior engineer to the project. Unfortunately, that engineer got sick before finishing, so you’ve been asked to step in and finish their work—all the other senior engineers are busy with other important tasks. It’s your job to finish building and testing this feature before we release it. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html#assignment-scenario",
    "relUrl": "/projects/ip1.html#assignment-scenario"
  },"56": {
    "doc": "Individual Project 1",
    "title": "Getting started with this assignment",
    "content": "The senior engineer who was working on this task has already made a good start: they’ve designed most of the feature, implemented and tested most of the frontend, and stubbed out the backend. Their code is in the fall2025-ip1 branch of the course staff’s Covey.Town repository that you forked or cloned in IP0. To get this starter code, you need to fetch this branch. The process differs depending on whether you forked or cloned the starter repository in IP0. Can I trust that the senior engineer's code is perfect? The short answer is \"no\": you're still expected to exercise good technical judgment, even when working with code written by someone who is more experienced than you. If you find (what you think) is a bug in the starter code, you should fix it: don't treat the starter code as if it is perfect or handed-down from on high. That said, you should probably apply a high standard when trying to decide if the starter code does something correctly: your senior colleague _probably_ knows what they're doing. Forking vs. Cloning When you fork a repository, you create a new remote copy (i.e., on GitHub itself) of it that's completely under your control. When you clone a repository, you create a local copy (i.e., just on your computer, not on GitHub). This little article does a good job explaining the difference, if you want more details. If you forked our repository . You’ll need to “pull from upstream”. Assuming you cloned your own fork, you’ll need to add our fork as a remote (from the folder containing your copy of Covey.Town): . git remote add course-staff https://github.com/kelloggm/covey.town.git . This command allows you to push to or pull from our repository on GitHub, in addition to your own. To get the starter code, run: . git fetch course-staff git checkout fall2025-ip1 . If you cloned our repository . In this case, you just need to fetch our changes and then switch to the appropriate branch: . git fetch origin git checkout fall2025-ip1 . Limitations on modifying files . You can modify any files that you’d like, but you are not permitted to modify the existing tests for Covey.Town: the only test files you can modify are the ones related to Quantum TicTacToe. For example, while you are permitted to modify TicTacToeGame.ts, you are not permitted to modify its existing test suite: that test suite still must pass unmodified. This restriction represents a backwards-compatibility constraint that is common in the real world: you’re allowed to modify code as long as its externally-visible behavior doesn’t change. Note that the list of files in package.json needs to include everything that you modified; see the submission instructions. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html#getting-started-with-this-assignment",
    "relUrl": "/projects/ip1.html#getting-started-with-this-assignment"
  },"57": {
    "doc": "Individual Project 1",
    "title": "Implementation Tasks",
    "content": "There are three high-level tasks you need to do: . | Task 1: implement the backend of the game (in QuantumTicTacToe.ts) and test it (inQuantumTicTacToe.test.ts). This has barely been started, so this should be the bulk of your work. | Task 2: wire up the backend so that it can handle incoming events (QuantumTicTacToeGameArea.ts). The senior engineer who handed this off to you has written a complete test suite and started it already: you just have to finish it. | Task 3: finish wiring up the frontend and the backend by implementing the _updateFrom method in QuantumTicTacToeAreaController.ts in the frontend. Your colleague has already written tests for this, as well. | . We suggest that you complete the tasks in the order presented here, but it’s up to you. Task 1: QuantumTicTacToeGame (58 points) . The QuantumTicTacToeGame class extends the base Game class. The senior engineer has already defined the relevant types for the game’s state and for moves, which you can find in the file shared/types/CoveyTownSocket.d.ts. They’re also reproduced below: . QuantumTicTacToe types /** * Type for a move in Quantum TicTacToe */ export interface QuantumTicTacToeMove extends TicTacToeMove { board: 'A' | 'B' | 'C'; } /** * Type for the state of a Quantum TicTacToe game. * The state of the game is represented similarly to the regular TicTacToe * game, but using the our Quantum move structure. We also store * the xScore and oScore so that it's not necessary to rerun old * games to determine their score. */ export interface QuantumTicTacToeGameState extends WinnableGameState { moves: ReadonlyArray&lt;QuantumTicTacToeMove&gt;; x?: PlayerID; o?: PlayerID; xScore: number; oScore: number; publiclyVisible: { A: boolean[][]; B: boolean[][]; C: boolean[][]; }; } . Note how QuantumTicTacToeMove extends the existing TicTacToeMove type. The senior engineer working on this project wanted to reuse as much of the existing TicTacToe logic as possible, and that should be one of your goals as well as you finish their work. Constructor (1 point) . The class needs a constructor that initializes all of its fields. Grading: . | constructor implementation passes our tests: 1 point | . Joining and Leaving the Game (8 points) . First, you should implement the basic joining and leaving functionality via the _join() and _leave() methods. You’ll need to manage the “subgames” (A, B, and C) as well as any state that the Quantum game itself needs to manage. The senior engineer wrote a few basic tests for these functions, but you’ll want to write some of your own, as well. We recommend that you look at the implementation of the similarly-named methods in TicTacToeGame.ts and Game.ts to get an idea of how these are supposed to work. Grading: . | _join implementation passes our tests: 4 points | _leave implementation passes our tests: 4 points | . Applying a Move: Core Game Semantics (22 points) . The applyMove method is the core of the game: it needs to take a move and correctly update the corresponding subgame. The senior engineer who was working on this project suggested three helper methods: _validateMove, _checkForWins, and _checkForGameEnding, which are stubbed out already. You’ll need to implement these and the rest of applyMove itself. The senior engineer who was working on the project had also started writing the testing infrastructure for this method before they got sick: they wrote a makeMove method and two simple tests that use it (in QuantumTicTacToeGame.test.ts). You’ll want to expand these tests significantly. Testing (27 points) . There are basic tests for _join(), _leave(), and applyMove present, but they aren’t nearly complete enough. You should write test cases as you implement the features above. On the autograder, we will inject a set of 180 bugs into the reference implementation of QuantumTicTacToeGame.ts. For full credit, you test suite must detect at least 167 of these 180 injected bugs. The following table gives the scoring function for this part: . | Mutants detected | Points | . | &gt;= 167 | 27 | . | 166 | 24 | . | &gt;= 164 | 21 | . | &gt;= 161 | 18 | . | &gt;= 156 | 15 | . | &gt;= 148 | 12 | . | &gt;= 135 | 9 | . | &gt;= 124 | 6 | . | &gt;= 90 | 3 | . | &lt; 90 | 0 | . Task 2: wiring up QuantumTicTacToeGameArea (12 points) . The QuantumTicTacToeGameArea receives InteractbleCommands from players who enter the area on their client. The main responsibility of this class is to interpet those commands, dispatching them as appropriate to the QuantumTicTacToeGame instance that it manages. In this task, you will implement the handleCommand method of QuantumTicTacToeGameArea. There are three types of commands that the QuantumTicTacToeGameArea will receive, which map directly to the three methods of QuantumTicTacToeGame that you’ve already implemented. The senior engineer whose work you’re building on wrote a complete test suite for handleCommand, so you don’t need to write any additional tests for this class. Grading: . | your handleCommand implementation passes the tests: 12 points | . Task 3: finishing the frontend in QuantumTicTacToeAreaController (20 points) . The _updateFrom method in QuantumTicTacToeAreaController is responsible for synchronizing the local state of the QuantumTicTacToeAreaController with a new game state model received from the backend. It orchestrates the updates to the game board’s visual representation and emits events to notify the UI of any changes. It needs to: . | call the _updateFrom method from its superclass | reconstruct the visible state of the three tic-tac-toe boards (A, B, and C) in the UI based on the newModel it receives from the backend | emit events when the board has changed (“boardChanged” event) or when the turn has changed (“turnChanged”), because these have UI effects | . In essence, this method acts as the bridge between the raw game state from the server and the user-facing representation of the game, ensuring that players only see what they are supposed to see according to the rules of Quantum Tic-Tac-Toe. Grading: . | your _updateFrom method passes the tests: 20 points | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html#implementation-tasks",
    "relUrl": "/projects/ip1.html#implementation-tasks"
  },"58": {
    "doc": "Individual Project 1",
    "title": "Grading",
    "content": "This submission will be scored out of 100 points, 90 of which will be automatically awarded by the grading script, with the remaining 10 manually awarded by the course staff. Your code will automatically be evaluated for linter errors and warnings. Submissions that have any linter errors will automatically receive a grade of 0. Do not wait to run the linter until the last minute. To check for linter errors, run the command npm run lint from the terminal. The handout contains the same eslint configuration that is used by our grading script. Your code will be automatically evaluated for functional correctness by a test suite that expands on the core tests that are distributed with the starter code. Your tests will be automatically evaluated for functional correctness by a process that will inject bugs into our reference solution: to receive full marks your tests must detect a minimum number of injected bugs. Each submission will be graded against the same set of injected bugs (repeated submissions will not receive new/different injected bugs). You will not receive detailed feedback on which injected bugs you do or do not find. The autograding script will impose a strict rate limit of 5 submissions per 24 hours. Submissions that fail to grade will not count against the quota. This limit exists to encourage you to start early on this assignment: students generally report that assignments like this take between 3-20 hours. If you start early, you will be able to take full advantage of the resources that we provide to help you succeed: office hours, discussion on Discord — and the ability to have a greater total number of submission attempts. Your code will be manually evaluated for conformance to our course style guide. This manual evaluation will account for 10% of your total grade on this assignment. We will manually evaluate your code for style on the following rubric: . To receive all 10 points: . | All new names (e.g. for local variables, methods, and properties) follow the naming conventions defined in our style guide | There are no unused local variables | All public properties and methods (other than getters, setters, and constructors) are documented with JSDoc-style comments that describes what the property/method does, as defined in our style guide | The code and tests that you write generally follows the design principles discussed in lecture 2. In particular, your design does not have duplicated code that could have been refactored into a shared method. | . We will review your code and note each violation of this rubric. We will deduct two points for each violation, up to a maximum of deducting all 10 style points. Submission . Submit your assignment to Gradescope. Please contact the instructors immediately if you have difficulty accessing the course on Gradescope. The course entry code for Gradescope is pinned in the “#ip1-help” channel on Discord. To submit your assignment: run the command npm run zip in the top-level directory of Covey.Town. This will produce a file called covey-town.zip. Submit that zip file on Gradescope. Only the list of files in the \"files\" entry in the package.json will be included in this zip file. If you modified a file that isn’t already listed there, you need to add it to that list before you submit (we’ve listed an overly-conservative set of files that you are might want to modify - no need to worry if you didn’t make any changes to one of the files on the list). Gradescope will provide you with feedback on your submission, but note that it will not include any marks that will be assigned after we manually grade your submission for code style (these marks will remain hidden until it is graded). It may take up to 40 minutes for the grading script to complete. Gradescope is configured to only provide feedback on at most 5 submissions per-24-hours per-student (submissions that fail to run or receive a grade of 0 are not counted in that limit). We strongly encourage you to lint and test your submission on your local development machine, and not rely on Gradescope for providing grading feedback - relying on Gradescope is a very slow feedback loop. To check for linter errors, run the command npm run lint from the terminal. The starter code contains the same eslint configuration that is used by our grading script. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html#grading",
    "relUrl": "/projects/ip1.html#grading"
  },"59": {
    "doc": "Individual Project 1",
    "title": "Individual Project 1",
    "content": "The overall goal of the individual assignment for this semester is to simulate a “starter task” that you might be asked to take on as a junior engineer who is just starting on a new software engineering team. The task has been started for you by one of our senior engineers, and they estimated that completing it would take about one working day (i.e., 8 hours time on task). Unfortunately, that engineer will be out sick for the foreseeable future, so it’s on your to finish their work. Since you’re presumably taking other classes besides CS 490, we’re giving you two weeks for this task. But you should start early: rushing to finish at the last minute will probably lead to lower-quality code. The overall goal is to get you used to the Covey.Town codebase so that you’re ready to be effective during the course project throughout the rest of the semester. What's a \"senior\" engineer? When someone in industry talks about \"senior\" engineers, they usually mean \"engineers whose judgment is trusted.\" When you're first hired out of college, you'll (probably) start off as a \"junior\" engineer, with a senior engineer assigned to mentor you. Usually, junior engineers become senior within a few years. This HackerNews discussion answers this question for you more directly. A note on the accuracy of estimates in software engineering. As we'll discuss later in this class, engineers' estimates of how long an engineering task will take are notoriously variable. If it takes you significantly longer (or shorter) to do the task than our senior engineer's estimate, don't worry! This estimate is here as a rough guide for how long we think this task will take, but it is common for engineers to mis-estimate by an order of magnitude or more, even when they know they might do so. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/ip1.html",
    "relUrl": "/projects/ip1.html"
  },"60": {
    "doc": "\"Your Choice\" Readings",
    "title": "\"Your Choice\" Readings",
    "content": "Each lecture has one or more “Your Choice” reading assignments. During the semester, you must complete at least two “Your Choice” readings: one before the mid-term exam, and the other before the final exam. Each exam will have one question about the “Your Choice” reading; answering it correctly will be part of your grade on the exam. You may be permitted to answer additional questions about other readings for extra credit, too, so long as you don’t get any incorrect. This incentivizes you to read more than one “Your Choice” reading assignment. One “Your Choice” reading (“What is Software Engineering”’s task related to reading research paper abstracts) has a specific task associated with it. If you submit this “Your Choice” assignment to Canvas before the final exam, you won’t have to answer the relevant question on the final. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/optional-readings.html",
    "relUrl": "/projects/optional-readings.html"
  },"61": {
    "doc": "Project Final Deliverable",
    "title": "Project: Final Deliverable Due 10 December 2025 11:59pm AoE",
    "content": "The final project deliverable is the implementation (in GitHub) and the documentation turned in to Canvas. It also includes your final demo. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-deliverable.html#project-final-deliverable-due-10-december-2025-1159pm-aoe",
    "relUrl": "/projects/project-deliverable.html#project-final-deliverable-due-10-december-2025-1159pm-aoe"
  },"62": {
    "doc": "Project Final Deliverable",
    "title": "Project Implementation and Documentation",
    "content": "Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Optionally, you may also open a pull request to merge your feature into our main repository (submitting a pull request, or the pull request being merged into our codebase is independent of the grade you receive, but provides a platform for more visibility of your project). Contents . Your final team deliverable will include: . | The implementation of your new feature | Automated tests for your new feature | A report that describes how to use your new feature | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any processes that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . Submission Instructions . Code and documentation . After you have pushed all of your code (and documentation) to your team’s GitHub repository, create a release on GitHub, and apply the tag version final-submission. After your release is created, you’ll find that there is now a .zip that can be downloaded from GitHub that contains a snapshot of your entire repository. Download this zip file, unpack it, and follow the instructions that you provided in your README to double-check that the course staff will be able to run your project locally (this step is handy to make sure that you didn’t forget to include some key files in git). If needed, you can delete the release, make some changes, and re-release up until the deadline. Submit this zip file to Canvas under the assignment “Project: Code Submission”. Submit your report separately to Canvas, under the assignment “Project: Report”. Project Demo . You will make a live (in-person) demo to the instructor in the last week of classes. Your demo must last for no longer than ten minutes. Your team can sign up for a slot here; slots are available on the last day of class and on the two reading days immediately thereafter. Make sure that at least one member of your team has a laptop that can access your deployed covey.town instance with them when you arrive for your demo. Because demos are short and often scheduled back-to-back, if your whole team is not present and ready to start your demo at the time that you’ve signed up for, you will lose your slot and you will have to sign up for a later one. Individual Reflection . Create a PDF of your reflection, and submit it to Canvas, under the assignment “Project: Individual Reflection”. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-deliverable.html#project-implementation-and-documentation",
    "relUrl": "/projects/project-deliverable.html#project-implementation-and-documentation"
  },"63": {
    "doc": "Project Final Deliverable",
    "title": "Grading",
    "content": "Each project will be graded by the team’s assigned mentor and one other member of the course staff (including at least one instructor). We do not expect all teams to deliver all of the features that were initially proposed - in the (relatively short!) implementation period, there are sure to be some teams that encounter unexpected technical hurdles. As described in greater detail in the rubrics below, teams that have regular communication with their mentor regarding their project status may be permitted variances to their project scope. For most of the submission components below, we provide two benchmark rubrics: one for a submission that is satisfactory (full marks), and one that would be meeting our minimum expectations (a pass). In practice, when grading projects we will usually assign numeric grades and provide partial credit, using these rubrics as guidelines for those two extremes. In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the marks from a student. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at meetings with your mentor, through inspecting version control history, through each student’s self-reflection, and through each team’s (or student’s) peer evaluations during and/or at the end of the project. We will make regular efforts to collect and distribute this feedback throughout the project. Our ultimate goal is for all students to participate and receive full marks. Summary of grading . | Planning Documents . | 7.5% Preliminary Project Plan (already graded) | 10% Revised Project Plan (already graded) | . | Activities During the Project . | 5% Meetings with Mentor and Team Surveys | 10% Ongoing development progress, including code reviews | . | Final Deliverables . | Code . | 20% Final implementation of your feature | 10% Final test suite of your feature | . | Report . | 5% Feature Overview | 7.5% Technical Overview | 7.5% Process Overview | . | Demonstrations . | 2.5% Wizard-of-Oz demo (already graded) | 5% Preliminary Demo (already graded) | 10% Final demo | . | . | . This adds up to 100%; this sum is worth 45% of the course grade. Here are the detailed rubrics for the final deliverables: . 20% Delivered Features . We will grade each delivered project holistically using the following two rubrics: . Satisfactory: . | Implemented feature satisfies the conditions of satisfaction as proposed by the team and as agreed to by the course staff. If technical difficulties resulted in features being dropped, the project may still earn full marks on “delivered features,” but these difficulties must have been documented with the course staff as you encountered them during development. | Implemented feature can be deployed locally following the instructions provided with the code submission in its README without any debugging by the course staff. | Implemented feature contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Implemented feature largely satisfies acceptance criteria as proposed by the team, but may not meet the course staff’s interpretation of those criteria. | Implemented feature can be deployed locally following the instructions provided with the code submission in its README, with minor debugging by the course staff (e.g., one or two minor missing steps). | The implementation may have some obvious flaws, but largely works without crashing. | Implemented feature does not include any eslint-disable or ts-ignore flag | . 10% Testing . The project must include evidence of testing. Ideally, all new features will be accompanied by fully automated tests, but in some circumstances (particularly when engaging with Phaser, the game library, or Tiled, the map editor), this may not be feasible. If automated tests are not possible, include a discussion of your manual testing strategy, including a script that a future developer could use to manually test the feature. Satisfactory: . | Any new or modified backend features include tests that validate that the feature works as intended. These tests cover the changed code, and also contain well-written assertions that thoroughly check the expected behaviors. | Tests contains no ESLint warnings or errors; does not include any eslint-disable or ts-ignore flags | . Meets minimum requirements: . | Any new or modified backend features include at least one test, which may or may not be an effective test. | Tests may contain ESlint warnings (but no errors); does not include any eslint-disable or ts-ignore flags | . Activities During the Project . 5% Weekly Meetings with Mentor and Team Surveys . Throughout the semester, each team will be meeting with their mentor and with the instructor to discuss their project progress. Attendance at these meetings and demonstrations of progress will, cumulatively, account for 5% of the project grade. You will also be asked to complete Team Surveys and/or Peer evaluations to help track the progress. Note that being present for meetings (both literally and intellectually) with your mentor also factors into your individual Participation and Professionalism grade, so though this is a small part of the project grade, its weight in your final grade is larger. 10% Ongoing development progress, including code reviews . Each team is expected to use their GitHub repository, regularly committing changes while developing their project. You will also be expected to use pull-requests and code reviews. Satisfactory: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | There is evidence of code review - for example, pull requests that have comments on them | There is a correspondence between commit messages and the technical tasks that they are associated with; there are few (if any) commits with meaningless commits messages like . or Add files via upload. | Each team member has made at least 4 commits over the lifespan of the project | . Meets minimum requirements: . | There is a clear development history visible from the git repository: features were delivered incrementally, and not in a single (or several) commits at the end of the project | Each team member has made at least 2 commits over the lifespan of the project | . Final Report . The final report should consist of three sections: . 5% Report – Feature Overview . Satisfactory: . | The Feature section contains sufficient documentation for a user to interact with your updated version of Covey.Town. | The documentation covers all steps that the user would need to take to exercise all of your user stories. | Screenshots are included that capture the key interactions between a user and your new feature. | Course staff were able to follow these instructions to successfully interact with your project implementation. | The section is at most 4 pages (roughly 2,000 words maximum), NOT including figures. Fewer pages are absolutely acceptable, consider this a rough limit | . Meets minimum requirements: . | The Feature contains documentation for a user to interact with your updated version of Covey.Town, but perhaps does not fully describe how. | The documentation includes at least one or two screenshots, but screenshots do not capture interactions with all of the user stories. | The course staff were able to figure out how to use it through trial and error. | The section is at most 4 pages, NOT including figures. Fewer pages are absolutely acceptable, consider this a rough limit | . 7.5% Report - Technical Overview . Satisfactory: . | Technical Overview contains a description of any substantive changes to the existing Covey.Town codebase, and of the architecture of your new code. | It uses UML diagrams, CRC cards, state diagrams or any of the other techniques that help describe the structure. | It provides a well-reasoned rationale for why this is the “right” design. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) Meets minimum requirements: . | Technical Overview includes a description of all major changes to the code compared to our existing Covey.Town codebase. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . 7.5% Process Overview . Satisfactory: . | Process overview contains a detailed description of the manner in which agile project management processes were used during the project (i.e., sprints, sprint reviews, retrospectives and blameless reviews). | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . Meets minimum requirements: . | It provides a summary of what was planned to happen in each sprint vs what actually happened, with a discussion of what was revised as a result. | The document is at most 2 pages (fewer pages are absolutely acceptable, consider this a rough limit) | . 10% Final Demonstration . Each team will be required to demonstrate their feature to their classmates and to the instructor(s) and TA(s) on the last day of class. Select projects may be hosted in a project showcase. Here are the projects from Spring 2022 project showcase. Satisfactory: . | Demo is functional on the final day of class and is consistent with the project as described in the rest of your final submission | . Meets minimum requirements: . | Demo is functional on the final day of class and is mostly consistent with the project as described in the rest of your final submission | . Resubmission After the Final Demo . Sometimes, project teams can’t quite finish everything they’ve promised by the time of the final demonstration on the last day of class. It’s better to deliver a feature late than never deliver it, so if you find yourself in this situation, you’re permitted to continue working on your project and resubmit your project materials and do another demo for the instructor and your project mentor. If your team is in this situation, you must: . | On the same day as the final demo (i.e., the last day of class), send an email to the instructor, your project mentor TA, and your teammates declaring that you intend to resubmit. Each of your teammates must respond by this deadline indicating that they agree that a resubmission is appropriate. | In writing (email is fine), declare exactly which feature(s) or user stor(ies) you will complete by the resubmission deadline. This email must be received by the instructor and TAs no later than 72 hours after the deadline for your initial email declaring your intention to resubmit (i.e., it must be received no more than 3 days later, AoE, than the last day of class). | You must schedule a meeting with your project mentor and the instructor before the class’ final exam (note: day of the final exam is not acceptable) to re-demonstrate your feature. The deadline for scheduling this demo is the same as the deadline for providing the scope of work email (see previous bullet point): no more than 3 days after the last day of class. Note that the instructor generally does not check email on the weekend. | . The consequences of choosing to resubmit are: . | you will not receive your final grades on your project materials until after your resubmission demo. | you must resubmit all project deliverables before your rescheduled demo. | you will be held to a higher standard on all project materials, since your team will have extra time to polish them. | your final grades on all materials will be evenly split between the grade you would have received on your original submission and the grade you receive on your resubmission. Additionally, a 5% late penalty is automatically applied to your resubmission. A further 5% penalty is applied if, in the view of the instructor, your resubmission does not substantially improve on your original submission. Do not resubmit unless your work was substantially incomplete at the regular deadline: these policies mean that resubmitting is only a good idea if your project would otherwise be graded poorly. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-deliverable.html#grading",
    "relUrl": "/projects/project-deliverable.html#grading"
  },"64": {
    "doc": "Project Final Deliverable",
    "title": "Individual Reflection",
    "content": "Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own. Satisfactory completion of all parts of this reflection is required to receive an “A” grade in the course, and may be used to calibrate project scores across multiple team members. The individual reflection also provides an opportunity for students to provide confidential feedback on the performance of their teammates. Project Concept . Reflect on the evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from original project concept; | Includes at least 1 paragraph of personal reflection on the cause of any variances from the project concept. | . Project Process . Reflect on the evolution of your development process: How did the process by which you designed and implemented evolve from your original project plan? Were there any processes that in hindsight, you wish that you followed, or wish that you followed better? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph describing all variances from the software development processes envisioned in your original project plan; | Includes at least 1 paragraph describing software processes (described in class or not) that you wish you had followed, or wish you had followed better, supported by evidence from your personal experience working on the project. | . Project Team . Reflect on your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? Do you think that each of your teammates are deserving of the same grade as you? . Satisfactory: . | Is at least 2 paragraphs long; | Includes at least 1 paragraph reflecting on your own performance as a team member on this project, including what you would have done differently, given what you know now; | Includes at least 1 paragraph reflecting on your overall team dynamic, including strengths and weaknesses. Reflect on how you might have organized your team differently given what you know now. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-deliverable.html#individual-reflection-1",
    "relUrl": "/projects/project-deliverable.html#individual-reflection-1"
  },"65": {
    "doc": "Project Final Deliverable",
    "title": "Project Final Deliverable",
    "content": "Changelog: . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-deliverable.html",
    "relUrl": "/projects/project-deliverable.html"
  },"66": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "The individual and team projects for this class are designed to mirror the experiences of a software engineer joining a new development team: you will be “onboarded” to our codebase, make several individual contributions, and then form a team to propose, develop and implement a new feature. The codebase that we are be developing on is a remote collaboration tool called Covey.Town. Covey.Town provides a virtual meeting space where different groups of people can have simultaneous video calls, allowing participants to drift between different conversations, just like in real life. Covey.Town is inspired by existing products like Gather.Town, Sococo, and Gatherly.IO — but it is an open source effort, and the features will be proposed and implemented by you! All implementation will take place in the TypeScript programming language, using React for the user interface. Overview of Project Deliverables . | Date | Deliverable | Description | . | 9/29/25 | Individual Project Proposals | Propose a feature for Covey.Town and specify preferences for teammates | . | 10/3/25 | Team Assignment | Teams will be assigned based on individual proposed features. | . | 10/13/25 | Preliminary Project Plan | As a team, propose and plan a new feature for Covey.Town that can be implemented within 7 weeks | . | 10/27/25 | Revised Project Plan | Refine the scope of your feature based on staff feedback, define detailed requirements and project acceptance criteria. | . | 10/31/25 | Deployment Demo | Show that you can deploy a lightly-modified copy of covey.town to a remotely-accessible machine. | . | 11/3/25 | First team survey | Let us know how you think the project is going. | . | 11/7/25 | Wizard-of-Oz Demo | Show what your project will look like, once it is complete, to your project mentor and the instructor. This demo doesn’t require you to show any working code: it is purely about design. | . | 11/21/25 | Preliminary Demo | Demonstrate one user story to your project mentor and the instructor. In this demo, you need to actually be running your own code (unlike the Wizard-of-Oz demo). | . | 11/26/25 | Second team survey | Let us know how you think the project is going. | . | 12/10/25 | Project Implementation and Documentation | Deliver your new feature, including design documentation and tests. | . | 12/12/25 | Final Demo | You will demo your feature to the instructor by this date. | . | 12/12/25 | Third team survey | Let us know how you think the project is going. | . | 12/17/25 | Project Implementation and Documentation (Resubmission) | If your final demo does not meet your project goals, you may schedule another demo with your project mentor and the instructor no more than one week after the last day of class (12/17). Re-submit your code and documentation immediately before the demo. | . All assignments are due on the specified date, AoE (i.e., before the beginning of the next day anywhere on Earth, which is at 7am EST the next day). Summary of Project Grading . Your overall project grade (which will account for 45% of your final grade in this course) will be the weighted average of each of the deliverables. | Planning Documents . | 7.5% Preliminary Project Plan | 10% Revised Project Plan | . | Activities During the Project . | 5% Meetings with Mentor and Team Surveys | 10% Ongoing development progress, including code reviews | . | Final Deliverables . | Code . | 20% Final implementation of your feature | 10% Final test suite of your feature | . | Report . | 5% Feature Overview | 7.5% Technical Overview | 7.5% Process Overview | . | . | Demos . | 1% Deployment demo | 2.5% Wizard-of-Oz demo | 4% Preliminary demo | 10% Final demo | . | . In cases where team members do not equally contribute to the project, we may assign different grades to different individuals, up to an extreme of deducting 50% of the team project grade for a student. We will evaluate each individual’s contribution on the basis of a variety of factors, including progress reports at meetings, through inspecting version control history, through each students’ self-reflection, and through each students’ peer evaluation (during and/or) at the end of the project. We will make regular efforts to collect and distribute this feedback throughout the project — our ultimate goal is for all students to participate and receive full marks. Team Formation . All projects will be completed in a team of 3-4 students (most teams will have 4). Part of the first deliverable for the project will be a team formation survey: you will be able to indicate your preferences for teammates. The instructors will assign students to the teams based on a number of factors including your responses to the survey. Individual Project Proposal . You’ll write a one-page proposal for a feature. You only need to explain the feature from a user perspective in this document. We’ll create groups so that people whose individual proposals are similar are grouped together. Your feature should be something that can be implemented within the timeframe allotted (5-7 weeks), and will be implemented in a fork of the main Covey.Town codebase. Team Meetings with Mentor . Each team will be assigned a member of the course staff as a mentor, who will also serve as your point of contact for project grading. During the first week after project teams are announced, you will have a “Kickoff Meeting” with your mentor, where you will meet your mentor and have the opportunity to share any early ideas that you might want feedback on before submitting the preliminary proposal. Once project begins in full force, you will have regular standup meetings with your mentor (scheduled at your team’s and your mentor’s convenience, at least once every week) in order to help ensure that you are making progress on the project, and to help address problems that you encounter (be they technical or non-technical problems). Preliminary Project Plan . All projects will involve frontend and backend development of a new feature for Covey.Town. Once teams have been formed, you and your team will decide what kind of new feature you would like to build. We suggest starting with one of your individual proposals, but you’re welcome to come up with something new together, too, if you’d like. Talk to your mentor! Given that you will be up-to-speed on the Covey.Town codebase (and have been introduced to TypeScript, React, NodeJS, and testing frameworks), and that you will have a team of three or four, we expect that the feature that you propose will be more complex than the feature implemented in the individual projects. The project plan will focus on two sections: . | User stories and conditions of satisfaction that describe the feature that you plan to implement. | Work breakdown: Map your user stories to engineering tasks. Assign each task to a team member (or pair of team members), provide an estimate for how long each task will take, a rationale for that estimate, and schedule those stories into sprints. | . Creating a GitHub Repository . Your team’s development must take place within a private GitHub repository in our GitHub Classroom. To create your repository, each member of your team should follow these instructions: . | Sign in to GitHub.com, and then use our invitation to create a repository with the covey.town codebase. Check to see if one of your groupmates has created a group already - if so, select it to join it. Otherwise, you should enter your group number and the current semester (e.g. “Group 7-Au25”) as the team name. | Refresh the page, and it will show a link to your new repository. Click the link to navigate to your new repository. This is the repository you will use for the project. | . This repository will be private, and visible only to your team and the course staff. After the semester ends, you are welcome to make it public - you have complete administrative control of the repository. Revised Project Plan . Based on the feedback that you receive from the course staff, you will revise your preliminary project plan, creating a more detailed plan to implement your new feature. The project plan will include: . | Revised user stories and conditions of satisfaction (based on feedback on the preliminary project plan) | Revised work breakdown (based on feedback on the preliminary project plan) | . Your team will self-organize, as agile teams do, and will use the work breakdown and schedule as the basis for your check-ins with your team’s mentor. Project Implementation and Documentation . You will be assigned a mentor for your project who will work closely with you for the entire project. You will coordinate with the mentor to setup weekly meetings and regular sprint demos. Peer evaluation will also be used. Your final team deliverable will be a “release” of your new feature on GitHub (with tests), and will be accompanied by a demo. Optionally, you may also open a pull request to merge your feature into our main repository (submitting a pull request, or the pull request being merged into our codebase is independent of the grade you receive, but provides a platform for more visiblity of your project). Your final team deliverable will include: . | The implementation of your new feature | Automated tests for your new feature | A report | . Accompanying the final team deliverable will be an individual reflection, which every student must submit on their own, which will include your reflections on: . | The evolution of your project concept: How does the project that you delivered compare to what you originally planned to deliver? What caused these deviations? | The software engineering processes that you feel could have been improved in your project: were there any procesess that in hindsight, you wish that you followed, or wish that you followed better? | Your team dynamic: Provide a frank (and ideally, blameless) postmortem of your and your teammates collaborative performance and participation. If you had to do this same project over with the same teammates, what would you have done differently (or not) to improve your team’s overall performance? | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-overview.html",
    "relUrl": "/projects/project-overview.html"
  },"67": {
    "doc": "Project Plan",
    "title": "Preliminary Project Plan Due Monday 13 October 2025, 11:59pm AoE",
    "content": "This is the first team assignment of the group project. In this assignment, your team will: . | settle on a feature that everyone in the group is happy to propose. This feature can be one of the ones that one of you proposed in the individual project proposals, but it doesn’t have to be. | write a project plan that lays out in greater detail both the design of your feature and how you plan to break up the work that’s necessary to build it. Specifically, the project plan will include: | Introductory problem statement | User stories and acceptance criteria: high level description of how users will interact with your new feature. | Work breakdown: Define engineering tasks that will be necessary to implement your new feature. Map each task to a sprint. | . Your mentor will review your project plan and provide you with feedback on the scope and details provided in this plan. Your team will self-organize, as agile teams do, and will enhance and adapt its plan during the project lifecycle. As such, the primary goal of this document is to begin the planning process, and not to produce a detailed plan that must be followed precisely. The course staff will provide feedback on your project to help ensure that the scope of your project is appropriate. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html#preliminary-project-plan-due-monday-13-october-2025-1159pm-aoe",
    "relUrl": "/projects/project-plan.html#preliminary-project-plan-due-monday-13-october-2025-1159pm-aoe"
  },"68": {
    "doc": "Project Plan",
    "title": "Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your project plan should begin with a 1-3 paragraph introductory problem statement: what problem in Covey.Town does your (proposed) feature solve? Provide a paragraph (or two) that describes why you are interested in building this feature. Given the problem statement, develop three user stories that show how a user would interact with the feature. User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. You should include three different user stories to describe how users will interact with your feature. Your three user stories should cover the key behavior that your feature will provide. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. We’ve provided a tutorial on writing user stories to help with this part. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html#problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    "relUrl": "/projects/project-plan.html#problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"69": {
    "doc": "Project Plan",
    "title": "Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary—not all work items are equally difficult or require the same amount of engineering effort. Each task on the work breakdown should be assigned to exactly one team member, who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Consider the dependencies between tasks: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your project, we do not expect that you will know all of the details about precisely how to implement your feature such that you could break it down into tasks that you feel could be implemented in a day or two. However: Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project, providing clear deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. You might consider even scheduling some of these research tasks to take place during Sprint 0 (immediately after submitting this document). For example: Consider if you were proposing a “Viewing Area” project (this was an individual project in previous semesters). It might be difficult to consider how to break down a task like “Implement the frontend components for sychnronized video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed YouTube videos,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Be realistic, and leave time for contingencies and for your other courses. If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). We will provide you with feedback on this preliminary project plan, which you will use to produce a revised project plan (due two weeks after the main project plan). Throughout the project period, teams will meet regularly with their mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following two-week sprints: . | Sprint 0: Oct 7 - Oct 18 | Sprint 1: Oct 19 - Nov 1 | Sprint 2: Nov 2 - Nov 15 | Sprint 3: Nov 16 - Nov 29 | Sprint 4: Nov 30 - Dec 10 (note: this sprint is shorter than the other—only about 10 days. We don’t recommend scheduling many tasks in this sprint, because of the likelihood that some tasks from prior sprints might not be done yet.) | . | . Your work breakdown should take the format of a simple textual list. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html#work-breakdown-max-10-pages",
    "relUrl": "/projects/project-plan.html#work-breakdown-max-10-pages"
  },"70": {
    "doc": "Project Plan",
    "title": "Submission",
    "content": "Your project plan should be submitted as a single PDF in Canvas to the assignment “Preliminary Project Plan.” Each team submits a single document to Canvas: when uploading the submission, your teams should already be present in Canvas. Be sure to tag your team mates. The assignment is due by the end of October 7, AoE. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html#submission",
    "relUrl": "/projects/project-plan.html#submission"
  },"71": {
    "doc": "Project Plan",
    "title": "Grading",
    "content": "The project plan will account for 7.5% of your project grade, and will be graded out of 75 points. The grading of the project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 4-10 sentences that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | Minor deductions for factual errors (“don’t say false things”) or egregious overclaims (“our project will usher in a new era of world peace”) | . User stories (12 points): . Each of the three user stories will account for 4 points of your grade on this assignment and graded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any relevant error cases | . | . Work breakdown (58 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (20 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature, considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (9 points): . Receive full marks if . | Each element of the work breakdown is assigned to specific team members, and we can clearly identify which specific team member is primarily responsible for each “small” or “medium” task. You have a bit of flexibility about how you want to assign tasks (e.g., it’s permitted for you to have “primary” and “secondary” team members for each tasks, just one team member per task, etc.) as long as it is clear to the course staff which team member has the primary responsibility for each task. | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | Each team member has at least one task assigned to them during each sprint) | . Sizing of tasks (20 points): . Receive full marks if each element on the work breakdown: . | Has a size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a responsible justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint 0, or perhaps sprint 1. | . | . Scheduling of tasks (9 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html#grading",
    "relUrl": "/projects/project-plan.html#grading"
  },"72": {
    "doc": "Project Plan",
    "title": "Project Plan",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/project-plan.html",
    "relUrl": "/projects/project-plan.html"
  },"73": {
    "doc": "Projects",
    "title": "Projects",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/",
    "relUrl": "/projects/"
  },"74": {
    "doc": "React Tutorial",
    "title": "React Basics",
    "content": "This tutorial covers the basic concepts of react. By the end of this tutorial, you will be able to create a new react app, understand the basic concepts of react such as states and props, understand React hooks and handling events. | React Basics | Creating a new NextJs App | Understanding a React App . | Components | Template For Structure of Function Component | Props | State | Communicating between Components . | Parent to Child | Child to Parent | . | Handling Events | . | React Hooks . | UseState . | Updating Arrays in State | . | UseEffect . | Object Dependencies in UseEffect | . | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#react-basics",
    "relUrl": "/tutorials/react-basics#react-basics"
  },"75": {
    "doc": "React Tutorial",
    "title": "Creating a New Next Js App",
    "content": "Let’s use npx and create-next-app to create a new Next.Js project . | npx stands for Node Package Execute (Part of the npm package since version 5.2). It is a runner that can execute any package that you want from the npm registry without even installing that package. In this case npx tool temporarily installs the create-next-app npm package and uses it to create our project. | Please check the following reference to the Next.Js boiler plate and getting started with framework Next.Js official documentation . | . | We use the create-next-app npx package to create an application that creates a fully-featured TS package. npx create-next-app my-app . | Note 1: This will create a new project directory called my-app under the current directory. | Note 2: This will create a git repo in my-app, so you probably shouldn’t do this inside a pre-existing git repository. | Note 3: Create the project with the following details after executing the command | . | Navigate to the project directory using the command: cd my-app . | To start the development server for React, run the command: npm run dev . | Note: Next.Js renders the content within the app/pages.tsx file as the root component. | . | Navigate to http://localhost:3000/ to see the default react page. | After a few seconds, a browser window opens, with our app running: | . | Chakra UI components can be reused and the library can be installed for Next.js with following command: npm i --save @chakra-ui/react @chakra-ui/next-js . The save flag is used to add the dependency in the package.json file. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#creating-a-new-next-js-app",
    "relUrl": "/tutorials/react-basics#creating-a-new-next-js-app"
  },"76": {
    "doc": "React Tutorial",
    "title": "React Component",
    "content": "React follows a Component based architecture. A component is a repeatable html element with built-in state, business logic, and a lifecycle. The component may be something as simple as a single html element such as an input box, or a button, or a complex entity made up of other components. Components are the basic building blocks of a React application and they allow the developer to split the UI into independent and reusable pieces where each piece can be used in isolation. Creating a Function Component in React . view in sandbox . The simplest method to define a component is to write a function in Javascript. These components are also widely referred as functional stateless components but in the recent versions of React, they have the capabilities to contain state as well. import * as React from \"react\"; interface Props { name?: string }; function App (props: Props) { return ( &lt;div className=\"App\"&gt; &lt;h1&gt;Welcome to React with Typescript Tutorial.&lt;/h1&gt; &lt;/div&gt; ); } export default App; . A Few Things to Note About React Components: . | The root (App) component is the entry point for the React App and all other components are nested in it. | We define a function component using a javascript function, passing the props type in as a generic parameter. | The import statement is used to import the public classes/functions from the react library. | A function can return a single top level element. | div is the top level element in this case and other elements can be nested in it. | The attribute className is used to specify a CSS class name if CSS properties have been defined seperately for a class. | className attribute is used to set the value of an element’s class attribute. Using this property, the user can set the class of an element to the desired class. | . | . | The round brackets (()) after return are used to span a JSX/TSX element across multiple lines. | At last , the component needs to be exported from the current file, so that it can be imported somewhere else and can be used either in isolation or combination with other components for rendering on the UI. | Elements on one line can be returned directly. | Each instance of a component creates a new element independent of other instances of the component. | Each component has its own state, props, and lifecycle (which will be explored later in the tutorial). | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#react-component",
    "relUrl": "/tutorials/react-basics#react-component"
  },"77": {
    "doc": "React Tutorial",
    "title": "Template For Structure of Function Component",
    "content": "view in sandbox . import * as React from \"react\"; interface Props { property1?: value1, property2?: value2 } function ComponentName (props: Props) { const handler = () =&gt; { /* ... */ }; return ( &lt;div&gt;Our TSX&lt;/div&gt; ); }; ComponentName.defaultProps = { /* ... */ }; export default ComponentName; . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#template-for-structure-of-function-component",
    "relUrl": "/tutorials/react-basics#template-for-structure-of-function-component"
  },"78": {
    "doc": "React Tutorial",
    "title": "Props",
    "content": "view in sandbox . React components are similar to JavaScript functions and can accept arbitrary arguments called props. Since components are reusable, props are especially useful to display different content in each instance of the component. Let us extract the header elements from the previous code snippet into a new component called Header. We can then use props to say “hello” to different users. | Create a new file in src/ directory called Header.tsx | Create and export a function called Header in the file as below: | . import React from \"react\"; interface IProps { name?: string; } const Header = (props: IProps) =&gt; { return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;; }; Header.defaultProps = { name: \"World\" }; export default Header; . | The above code snippet creates a new function component Header and prints the value of the name passed in the props. | It defines a defaultProps for the component Header where the default value for name is used in case the value for props for name is not passed in any instance of the component. | In App.tsx: . | Remove the code in h1 tags. | Import the Header component as below: . | import Header from './Header'; . | . | Update the contents of return as below: . | &lt;div className=\"App-header\"&gt; &lt;Header /&gt; &lt;Header name=\"John\" /&gt; &lt;Header name=\"Jane\" /&gt; &lt;/div&gt; . | . | Save all files and run npm start | . | . A few things to note from the above example: . | Component.defaultProps can be used to specify default values for props. | Components are rendered to the user interface and the component’s logic contains the data to be displayed in the view(UI). | Curly braces ({}) in JSX/TSX are used as a connection between the data to be displayed in the view and the component’s logic for displaying the data in the view. | In our example, {props.name} will reflect the value of the property name in the view(html) for the cases when the values “John” and “Jane” are passed as props for the name property. | If no props are passed for an instance of the component, then it will display the default value of props. Note: React uses a special syntax called JSX which allows us to mix HTML with JavaScript. The curly brackets {} lets the JSX parser know that the content inside the brackets is JavaScript. | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#props",
    "relUrl": "/tutorials/react-basics#props"
  },"79": {
    "doc": "React Tutorial",
    "title": "State",
    "content": "State management is just a means of facilitating data sharing and communication among components. It creates a concrete data structure that you can read and write to reflect the state of your program. const [counter, setCounter] = useState(0) . The above snippet shows creation of counter state with an intial value of 0. Using the array destructuring syntax we extract out the state variable and the function to update the counter value. In its most basic form, a State object is a JavaScript object that represents the part of a component that can change as a result of a user’s action. States can also be thought of as a component’s memory. State update calls are asynchronous. As one cannot expect to call the update state function on one line and expect the state to be updated on the next. The reason for this is that update state methods are more of a request than an immediate order to update state. So React schedules an update to a component’s state object. When state changes, the component responds by re-rendering. Also multiple update request may be batched into one for performance reasons. Changes in state and/or props will both cause our React component to re-render. Changes in state, on the other hand, can only occur internally as a result of components modifying their own state.  . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#state",
    "relUrl": "/tutorials/react-basics#state"
  },"80": {
    "doc": "React Tutorial",
    "title": "Communication Between Components:",
    "content": "Parent To Child Component Communication: . view in sandbox . Passing values from a parent component to a child component is simple. We only have to pass the values as props of the child component. The child component can then use the props object to output results. In the example code you will see that CounterContent component accepts a counter prop which is then used to display the value inside div element. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } function Counter() { const [counter, setCounter] = useState&lt;number&gt;(0); return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;button onClick={() =&gt; setCounter(counter + 1)}&gt;Increment Count&lt;/button&gt; &lt;/&gt; ); } . Child to Parent Component Communication . view in sandbox . For passing data from child component to parent component do the following steps: . | Declare a callback function inside the parent component. This function will get data from the child component. | Pass the callback function to the child component as props. | Child then sends the update to the parent through the use of the callback function. | . In the example below we have four children components: . | CounterContent: Displays the counter value | IncrementCounterButton: Increments the counter value | DecrementCounterButton: Decrements the counter value | CustomCounterButton: Sets the counter to a particular value. | . All callback functions passed to the children component are declared in Counter function which is the parent component that maintains the state value for counter. import { useState } from \"react\"; interface CounterContentProps { counter: Number; } interface IncrementCounterButtonProps { incrementCount(): void; } interface DecrementCounterButtonProps { decrementCount(): void; } interface SetCounterButtonProps { setCount(value: number): void; } function CounterContent({ counter }: CounterContentProps) { return &lt;div&gt;Counter: {counter}&lt;/div&gt;; } /** * Child component accepts a incrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function IncrementCounterButton({ incrementCount }: IncrementCounterButtonProps) { return &lt;button onClick={() =&gt; incrementCount()}&gt;increment Count&lt;/button&gt;; } /** * Child component accepts a decrementCount callback function as a props. * The callback which is declared inside the parent component triggers a state update. */ function DecrementCounterButton({ decrementCount }: DecrementCounterButtonProps) { return &lt;button onClick={() =&gt; decrementCount()}&gt;Decrement Count&lt;/button&gt;; } function CustomCounterButton({ setCount }: SetCounterButtonProps) { // change this value to see how child passes count value data to parent through // the use of callback function const dummyValue = 100; return ( &lt;button onClick={() =&gt; setCount(dummyValue)}&gt; Set Count to {dummyValue} &lt;/button&gt; ); } /** * Parent Component where state and callbacks are maintained. **/ function Counter() { const [counter, setCounter] = useState(0); const decrementCount = () =&gt; { if (counter === 0) return; setCounter(counter - 1); }; const incrementCount = () =&gt; { setCounter(counter + 1); }; const setCount = (value: number) =&gt; { setCounter(value); }; return ( &lt;&gt; &lt;CounterContent counter={counter} /&gt; &lt;IncrementCounterButton incrementCount={incrementCount} /&gt; &lt;DecrementCounterButton decrementCount={decrementCount} /&gt; &lt;CustomCounterButton setCount={setCount} /&gt; &lt;/&gt; ); } . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#communication-between-components",
    "relUrl": "/tutorials/react-basics#communication-between-components"
  },"81": {
    "doc": "React Tutorial",
    "title": "Handling Events",
    "content": "view in sandbox . | React impelemnts its own system of handling events that is very similar to handling events on DOM elements. There are some syntax differences: . | React events are named using camelCase, rather than lower case. | With JSX a function can be passed as an event handler instead of a string. | . | . For example, the HTML . &lt;button onclick=\"incrementCounter()\"&gt;Increment Counter&lt;/button&gt; . is slightly different in React: . &lt;button onClick={incrementCounter}&gt;Increment Counter&lt;/button&gt; . | React provides an equivalent of each event that you might be familiar with from standard HTML DOM. Events typing can be imported directly from react as shown in the example below: | . import { MouseEvent } from \"react\"; function HelloWorld() { const sayHello = (event: MouseEvent) =&gt; { event.preventDefault(); console.log(`${event.currentTarget.tagName}: says hello, world.`); }; return ( &lt;div&gt; &lt;button onClick={sayHello}&gt;Submit&lt;/button&gt; &lt;/div&gt; ); } export default HelloWorld; . For the list of all the supported events refer here . Please check the list of common events and instances in which they are used here . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#handling-events",
    "relUrl": "/tutorials/react-basics#handling-events"
  },"82": {
    "doc": "React Tutorial",
    "title": "React Hooks",
    "content": "React hooks are built-in functions which allows us to use state and other lifecycle features. The most basic hooks used by react are useState() which adds a state variable to a react component and useEffect() which is the lifecycle hook for a component. State of component refers to the data it is holding at a particular moment in time. useState(): . view in sandbox . In this section we will see how we can add state to a React Component using the useState() hook provided by React. The useState hook takes the initial value of the state variable as an argument, the initial state can be any type you want (a string, a number, an array, an object or a function). Only on the first render will the initial value be assigned. Each useState call returns a two-element array. The state variable is the first element of the array, followed by a function to change the variable’s value. | We’ll start by defining and initializing state for the number of times the button is clicked, by adding the state variable as follows: | . import {useState} from 'react'; function Counter() { const [count, setCount] = useState(0); ... } . This line of code looks a little strange, so let’s break it down: . | When the hook useState() is invoked, it returns an array. Where the first item is the state value, and the second item is a function that updates the state. | First, we import the useState from react library. | useState is a React function that lets us create state, passing in a default value as a parameter. In our case, we pass it a default value of 0. | The useState function returns an array containing two elements: | . | The first array element contains the current value of state. | . | . | The second array element contains a function to set state to a different value. | . | We destructure the array and store the first array element (the state value) in count, and the second array element (the function to set state) in setCount. | The rest of the function now has access to the count, via the count variable. The function is also able to increment the count, via the setCount variable. | . | Let’s add a function to update the state of the variable: | . function incrementCount() { setCount(count + 1); } . | Now, functions to set the piece of state take in the new state as their parameter. | . | Next we’ll make the component return the count along with a button to increment the count when clicked. Final function code will be as follows: | . import { useState } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . If we give this a try in the running app, we should find the count variable’s value to keep incrementing by one every time the button is clicked. After we’ve got our heads around the code needed to define state, accessing and setting state is fairly simple and elegant. Updating Arrays in State . Suppose we want to maintain an array in our state object. const [list, setList] = useState([]); . Now suppose we want to add an element to this list and have the component re-render to reflect the changes. We might try pushing an item to the list like so: . list.push(element); // doesn't work . However, React will not re-render the component as it does not detect a change in the state. This is because the object referenced in the state is the same before and after pushing the element, and so to React, the object looks the same because the reference is the same. To get around this, we must invoke the setList function to create a new reference so that React will detect the change and re-render the component. The easiest way in this case would be to use the spread operator (...) to make a copy of the existing list and push a new element to the new list: . const newList = [...list]; // copy the current list newList.push(element); setList(newList) . useEffect(): . view in sandbox . Now let’s have a look at how to invoke the code to execute at a certain point in the component’s lifecycle. Older versions of React consisted of different Lifecycle hooks that allowed a user to hook into various phases of component rendering such as componentDidMount, ComponentDidUpdate, etc. which have all been condensed into a single function called useEffect(). Let us observe how this hook behaves by printing out the count in browser console. The new functional component system in React (moving away from class based) added amazing syntactic sugar to the React ecosystem. Use of a hook to control component lifecycle is an example such as the useEffect() hook. | As always, we will start by importing the function from the react library: | . import { useEffect } from \"react\"; . | Next we will add the function to our existing counter component: | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, []); . Let’s break down this code to understand what is happening: . | We use React’s useEffect function to hook into the component life cycle. | The function takes in an arrow function, which executes when the component is first rendered. | The function takes in a second parameter, which determines when our arrow function is called. This parameter is an array of values that, when changed, will cause the arrow function to be invoked. In our case, we pass in an empty array, so our arrow function will never be called after the first render. | If we now try the running app and open the console, we’ll see that the log within the useEffect only appears once. | . | Let’s remove the second parameter into useEffect now: | . | If no second parameter is provided, it will cause the arrow function to be invoked first on mount and then on every re-render. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }); . | Additionally we can also pass the variable in the array to observe only changes related to a particular value (as below). | Now we can see that the component will render everytime the value of count is changed. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); . | We can also return a function from the useEffect hook which will be called when the component is unmounted. This is useful for cleaning up any resources that the component may have used. | . useEffect(() =&gt; { console.log(`The current count is ${count}`); return () =&gt; { console.log(\"The component is unmounting\"); }; }, [count]); . Let’s break this down: . |   | useEffect pattern | . | Run on every render | useEffect(() =&gt; { /* ... */ }); | . | Run when some changes | useEffect(() =&gt; { /* ... */ }, [array of Deps]); | . | Run on mount | useEffect(() =&gt; { /* ... */ }, []); | . | Run on cleanup | useEffect(() =&gt; { return ( /* ... */ ) }); | . | Finally, our component counter will look like: | . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(count + 1); } useEffect(() =&gt; { console.log(`The current count is ${count}`); }, [count]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . Object Dependencies in UseEffect . Consider a case where useEffect depends on an object: . import { useState } from \"react\"; import { useEffect } from \"react\"; function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { counter.count += counter.increment; setCounter(counter); // will not cause component to rerender } // Will not get called when incrementCount is called useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . In the example above, we’ve modified the counter to be an object containing both the current count and the amount to increment the counter by when the button is clicked. Similar to the list case for useState, updating an attribute of an object and setting the state variable to that same object reference will not cause a re-render, and useEffect will not detect a change in its dependencies, even though we have changed one of the attributes. To properly invoke a useEffect call, we must change the object reference itself: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter]); return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . The useEffect hook will now be invoked with each button click. However, our useEffect is dependent on the entire counter object, meaning that a change to any of its attributes will cause the useEffect hook to be called, which is not always a desired behavior. We can get around this by being more specific in our dependency list: . function Counter() { const [counter, setCounter] = useState({ count: 0, increment: 1 }); function incrementCount() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, count: counter.count + counter.increment}); } function incrementIncrement() { // we use the spread operator (...) to make a copy of the object setCounter({...counter, increment: counter.increment + 1}); } useEffect(() =&gt; { console.log(`The current count is ${counter.count}`); }, [counter.count]); // Now that we only depend on count, this function will not be called if the incrementIncrement function is called return ( &lt;div&gt; &lt;h1&gt;Count: {count}&lt;/h1&gt; &lt;button onClick={incrementCount}&gt;Click me to increment the count!&lt;/button&gt; &lt;button onClick={incrementIncrement}&gt;Click me to increase the increment amount!&lt;/button&gt; &lt;/div&gt; ); } export default Counter; . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics#react-hooks",
    "relUrl": "/tutorials/react-basics#react-hooks"
  },"83": {
    "doc": "React Tutorial",
    "title": "React Tutorial",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/react-basics",
    "relUrl": "/tutorials/react-basics"
  },"84": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan Due Monday 27 October 2025 11:59pm AoE",
    "content": "You should use the feedback on your preliminary project plan to revise the scope of your project, and discuss any changes with your assigned mentor. The goal of this assignment is to finalize the intended scope of your project based on these discussions and to outline the tasks that you will need to accomplish in order to complete your project. Your mentor will review your project plan and provide you with feedback on the scope and details provided in your preliminary plan. In this deliverable, you will revise your project plan based on that feedback, and any preliminary research tasks that you have completed. If there were any deficiencies or concerns noted by your mentor on your preliminary plan, you must address those concerns in this revised plan. If you are unsure of how to address any of these concerns or if you have addressed them, please discuss them with your mentor before submitting this revised plan. We list page maximums for each section as general guidance of what we are willing to grade. Please do not feel compelled to use all of the pages provided, and remember that a diagram or table can be as expressive (or more) as a comparable amount of text. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html#revised-project-plan-due-monday-27-october-2025-1159pm-aoe",
    "relUrl": "/projects/revised-project-plan.html#revised-project-plan-due-monday-27-october-2025-1159pm-aoe"
  },"85": {
    "doc": "Revised Project Plan",
    "title": "Revised Problem Statement, User Stories and Acceptance Criteria (max 4 pages)",
    "content": "Your project plan should begin with a 1-3 paragraph introductory problem statement: what problem in Covey.Town does your (proposed) feature solve? Provide a paragraph (or two) that describes why you are interested in building this feature. Given the problem statement, develop three user stories that show how a user would interact with the feature. User stories are requirements specified in the format “As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;.” My conditions of satisfaction are &lt; list of common cases and special cases that must work &gt;. Please make sure that your conditions of satification are complete (i.e., cover all common cases) and can be turned into testable behaviors. You should include three different user stories to describe how users will interact with your feature. Your three user stories should cover the key behavior that your feature will provide. Do not provide more than three user stories. Your problem statement and description of user stories and conditions of satisfaction should be between 2-4 pages. This revised project plan should be a standalone document (it is OK to copy/paste from the preliminary plan in this case). Mandatory update for all teams: Along with each condition of satisfaction, indicate its priority (high, medium, low). The priority should help refine your task breakdown. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages",
    "relUrl": "/projects/revised-project-plan.html#revised-problem-statement-user-stories-and-acceptance-criteria-max-4-pages"
  },"86": {
    "doc": "Revised Project Plan",
    "title": "Revised Work Breakdown (max 10 pages)",
    "content": "Given the project concept that you have chosen and the functionality that you expect to implement to satisfy your user stories, define a breakdown of the work that will be necessary to complete the project. A work breakdown includes all of the tasks necessary to accomplish the project, and will be an artifact that we will refer back to throughout the project to evaluate whether you are making satisfactory progress. Consider all of the kinds of tasks that your team will need to perform, including knowledge acquisition, design, implementation, testing and documentation tasks. It is hard to say (generically) how many work items are necessary. Each task on the work breakdown should be assigned to exactly one team member, who should provide a “T-Shirt” estimate for how long it will take (along with a justification for that estimate). Consider the dependencies between tasks: perhaps an API needs to be designed and specified before implementation can begin; perhaps your development environment needs to be configured before anything else can proceed. Assign tasks to sprints considering these dependencies. Given the preliminary nature of your project, we do not expect that you will know all of the details about precisely how to implement your feature such that you could break it down into tasks that you feel could be implemented in a day or two. However: Large tasks (those which you can not provide a responsible estimate for) must be accompanied by smaller “research” tasks that can be performed early on in the project, providing clear deadlines by which the task must either be refined into smaller tasks (based on new knowledge gathered), or reworked/abandoned. You might consider even scheduling some of these research tasks to take place during Sprint 0 (immediately after submitting this document). For example: Consider if you were proposing a “Viewing Area” project (this was an individual project in previous semesters). It might be difficult to consider how to break down a task like “Implement the frontend components for sychnronized video playback” into something that you could commit to doing within a day or two. Given that this is a task that can be delayed until the end of the project (no other tasks depend on it), it would be wise to consider having some tasks early on in the project, such as: “Find react components that embed YouTube videos,” and “Implement simple video player that does not synchronize playback.” Completing these smaller tasks early would let you both demonstrate that some forward progress is being made, and also allow you to create a much more responsible estimate for how that last, otherwise insurmountably large task would take. Be realistic, and leave time for contingencies and for your other courses. If you are uncertain that some tasks will be feasible, then be sure to include evaluation tasks earlier-on in the project that will allow for “go/no-go” decisions to move forward on a task or drop it. We understand that it is quite difficult to estimate the technical complexity of a new project (as you are doing in the case of this course). Throughout the project period, teams will meet regularly with their dedicated mentor, who will help track progress on a week-to-week basis and help to determine when adjustments to the project scope are needed. Each work item should contain the following information: . | Task to be performed | User story (or stories) that this task relates to | Team member responsible for completing the task | T-shirt size estimate of how long will be needed to complete the task, using the following buckets: . | Small: Can likely be completed by one team member in one sitting of less than 3-4 hours | Medium: Likely to require involvement of multiple team members, over the course of 1-2 days | Large: Currently unable to provide a responsible estimate. | . | A brief (1-2 sentence max) justification of how you reached the size estimate of the task | Milestone for delivering the task, chosen from one of the following two-week sprints: . | Sprint 0: Oct 7 - Oct 18 | Sprint 1: Oct 19 - Nov 1 | Sprint 2: Nov 2 - Nov 15 | Sprint 3: Nov 16 - Nov 29 | Sprint 4: Nov 30 - Dec 10 (note: this sprint is shorter than the other—only about 10 days. We don’t recommend scheduling many tasks in this sprint, because of the likelihood that some tasks from prior sprints might not be done yet.) | . | . Your work breakdown should take the format of a simple textual list. Mandatory update for all teams: Even if your work breakdown is entirely unchanged compared to the preliminary plan, please be certain to include updates on all “sprint 0” tasks (those which were scheduled to be completed before the due date of this revised plan). Many teams include research/learning tasks in the first week to help inform the rest of the work breakdown: you should be certain to revise your work breakdown based on what you have learned so far. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html#revised-work-breakdown-max-10-pages",
    "relUrl": "/projects/revised-project-plan.html#revised-work-breakdown-max-10-pages"
  },"87": {
    "doc": "Revised Project Plan",
    "title": "Submission",
    "content": "Your revised project plan should be submitted as a single PDF in Canvas to the assignment “Revised Project Plan.” Each team submits a single document to Canvas. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html#submission",
    "relUrl": "/projects/revised-project-plan.html#submission"
  },"88": {
    "doc": "Revised Project Plan",
    "title": "Grading",
    "content": "The revised project plan will account for 10% of your project grade, and will be graded out of 100 points. The grading of the revised project plan is further broken down as follows: . Introductory problem statement (5 points): . | Receive full marks if there is a narrative consisting of 4-10 sentences that describes a specific problem that your project aims to solve. | Receive partial credit if the narrative is present, but does not describe a problem that the project aims to solve | Minor deductions for factual errors (“don’t say false things”) or egregious overclaims (“our project will usher in a new era of world peace”) | . User stories (15 points): . Each of the three user stories will account for 5% of your grade on this assignment and graded as follows: . | Receive full marks if: . | The user story fits the problem statement | The user story satisfies the INVEST criteria for good user stories (construed quite broadly) | The user story includes conditions of satisfaction that cover the “normal” expected behavior of the feature, and any relevant error cases | Conditions of satisfaction can be turned into Testable behaviors | Conditions of satisfaction are prioritized | . | . Work breakdown (80 points): . Your work breakdown will be evaluated holistically on the following rubric: . Coverage of tasks needed (30 points): . Receive full marks if the work breakdown includes all (reasonably expected) tasks to implement your feature at a level of detail sufficient for the course staff to understand what you will be working on in a given sprint, considering these kinds of tasks: . | Background research | Design of interfaces and data types | Deployment of third-party services | Implementation | Testing | Documentation | . It is not possible to state generically for all projects whether all of the above types of tasks are necessary. However, we believe that this list is exhaustive (we do not expect other kinds of tasks). Assignment of tasks (10 points): . Receive full marks if: . | Each element of the work breakdown is assigned to specific team members, and no “small” or “medium” task is assigned to more than one team member. You have a bit of flexibility about how you want to assign tasks (e.g., it’s permitted for you to have “primary” and “secondary” team members for each tasks, just one team member per task, etc.) as long as it is clear to the course staff which team member has the primary responsibility for each task. | The distribution of tasks of each size are roughly similar between the whole team (no single person is assigned significantly more or fewer tasks of one size) | Each team member has at least one task assigned to them during each sprint | . Sizing of tasks (30 points): . Receive full marks if each element on the work breakdown: . | Has a reasonable size estimate (small, medium, or large) that is provided by the team member assigned the task. | Has a reasonable justification for that estimation | Every “large” task: . | Is accompanied by a reasonable explanation of why the team is unable to provide a responsible estimate | Is accompanied by at least one small or medium task, scheduled well-before the “large” task is due to be completed. We would expect that most of these research tasks are scheduled to sprint 0, or perhaps sprint 1. | . | . Scheduling of tasks (10 points): . Receive full marks if each element on the work breakdown: . | Is assigned to a sprint | There are no obvious constraint violations (tasks that logically must happen before others should be scheduled before them) | There are no “Large” tasks scheduled in sprint 0 | Tasks scheduled to be completed before the revised plan is due have an update as to their status, and the work breakdown is updated to reflect the result of these tasks. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html#grading",
    "relUrl": "/projects/revised-project-plan.html#grading"
  },"89": {
    "doc": "Revised Project Plan",
    "title": "Revised Project Plan",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/revised-project-plan.html",
    "relUrl": "/projects/revised-project-plan.html"
  },"90": {
    "doc": "Staff",
    "title": "Course Staff",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/staff/#course-staff",
    "relUrl": "/staff/#course-staff"
  },"91": {
    "doc": "Staff",
    "title": "Instructors",
    "content": "Martin Kellogghe/him . martin.kellogg@njit.edu . Office Hours: Thursdays, 1:00-2:00pm eastern, GITC 4314; or by appointment. To schedule an appointment with me, check my calendar and add a calendar event in any open spot that works for you during regular business hours (Monday to Friday, 9:30-5:30). You must schedule meetings at least 24 hours in advance, or I will automatically decline them. In your invitation, you must, at a minimum, 1) invite me to the event, 2) add a note to the event description that mentions CS 490 and what you’d like to meet about, and 3) specify whether you would prefer the meeting to be in-person or remote. It is unprofessional to schedule a meeting with me unless you have exhausted your other options to solve the issue (for example, don’t schedule a meeting with me about a homework issue until you have attended a TA’s office hours and asked there). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/staff/#instructors",
    "relUrl": "/staff/#instructors"
  },"92": {
    "doc": "Staff",
    "title": "Teaching Assistants",
    "content": "Nathan Yong . ny79@njit.edu . Office Hours: Mondays 1:30-2:30pm (GITC 4403) and Thursdays 2:30pm-3:30pm (GITC 4403) . Tiffany Yang . ty37@njit.edu . Office Hours: Mondays 5:30-6:30pm (GITC 4403) and Fridays, 4-5pm (GITC 4403) . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/staff/#teaching-assistants",
    "relUrl": "/staff/#teaching-assistants"
  },"93": {
    "doc": "Staff",
    "title": "Staff",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/staff/",
    "relUrl": "/staff/"
  },"94": {
    "doc": "Code Style",
    "title": "Code Style",
    "content": "Programs are easier to read and to understand when they are written in a familiar style and follow standard coding conventions. Most organizations that develop software therefore require programmers to write programs that follow the organization’s preferred style and coding conventions. These conventions can be very elaborate. Many of the guidelines are, in fact, arbitrary. When you are working on a coding project with other developers, different developers often have preference for slightly different syntax, for instance: should our string literals be enclosed by single quotes (') or double quotes (\")? Should files be indented with spaces or tabs? In TypeScript, there are often multiple ways to accomplish the same goal, for instance, you could create a new empty array with the expression const myArray = new Array(), or const myArray = []. Sometimes there is no difference between these variants except for how it reads, and other times there may be unintended consequences of making the seemingly correct but subtly wrong choice. Thankfully, it is possible to write automated checkers (and, at times, fixers) for these style violations. All code that you write for this class will be checked by ESLint, and must be free of style warnings and errors. Our ESlint rules are derived from Airbnb’s JavaScript Style Guide, ESLint’s Recommended Rules, TypeScript/ESLint Recommended Rules, React ESLint Rules and React Hooks ESLint Rules. We do not suggest studying these lists directly, instead, begin writing code naturally, and allow your IDE’s built-in style checker to report issues as you find them. The most important rules to get started are: . | Indent using spaces, not tabs; use 2 spaces for each level of indentation | Enclose all string literals with single quotes, not double | Variables must be named using lowerCamelCase, types are named using UpperCamelCase. Constants (read-only variables that are assigned a static value once and not reused) must be named using UPPER_CASE_WITH_UNDERSCORES. | The maximum line length is 100 characters | . Naming . While the linter can automatically flag names that violate camelCase rules, it can not automatically determine that a name is “good” - this is a subjective judgement call. Please consider the following when choosing names: . | Names should be informative (e.g lineTooLong() rather than checkLineLength()) | Names for types are typically nouns or noun phrases. Interface names, however, might be adjectives (e.g. Serializable). Class names may be noun phrases that include the interface name (e.g. CuckooClock and DigitalClock for classes that implement the interface Clock). | Use noun-like names for functions or methods that return values (e.g. circleDiameter rather than calculateDiameter). (Exception: simple getters can still have names that begin with get). | Reserve verb-like names for functions that perform actions (e.g. addItem). | Use adjective phrases for predicates when possible (e.g. line.tooLong()) | Variable and property names should be descriptive of what the variable is for, and not be named after the type of the variable (which is captured in the variable’s type declaration) | Names for properties that are private must start with a _ | . Documentation and Comments . All public properties and methods (other than getters, setters, and constructors) must be documented using JSDoc-style comments that describes what the property/method does. Example: . /** The unique identifier for this player * */ private readonly _id: string; . /** * A handler to process a remote player's subscription to updates for a room * * @param socket the Socket object that we will use to communicate with the player */ . Consider adding comments within your code to describe non-obvious behavior, or to capture why the code is written the way that it is. Do not add comments that simply restate what can already be immediately discerned by reading the code. For example, here is a useful comment: . // No valid session exists for this token, hence this client's connection should be terminated socket.disconnect(true); return; . Here is a useless comment on the same code snippet: . // Disconnect the socket socket.disconnect(true); return; . Comments are for documentation, not for keeping track of old code you are no longer using (do not submit commented-out code). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/policies/style/",
    "relUrl": "/policies/style/"
  },"95": {
    "doc": "Project Team Surveys",
    "title": "Project Team Surveys",
    "content": "There will be three anonymous surveys on how the project is going and how your teammates are performing: . | the first will be due on November 3, after the Deployment Demo | the second on November 26, right before Thanksgiving | the third with your individual reflection, after you submit your final deliverables | . These surveys exist to help the course staff identify problems; they are not directly used for grading. They’re designed to only take a few minutes of your time, and are graded on completion as reading quizzes. More information about the surveys will be posted about a week before the first one is due. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/projects/surveys.html",
    "relUrl": "/projects/surveys.html"
  },"96": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/",
    "relUrl": "/tutorials/"
  },"97": {
    "doc": "Ubuntu Setup Guide",
    "title": "Ubuntu Setup Guide",
    "content": "This is a software engineering course. There a focus on reading code and using large systems to accomplish tasks, because real systems are large—too large for you to hold their entire specification or codebase in your head, almost certainly. In this course, you will be expected to develop and maintain programs and scripts in multiple languages using multiple tools. As a result, we want to help you prepare a suitable development environment for the assignments in this course—your local environment might work, but all the assignments are guaranteed to work in Ubuntu 22.04. This tutorial will guide you in setting up an Ubuntu 22.04 environment. This tutorial will help you create a development environment that matches the autograder environment. If you choose to deviate from the suggested x86_64 Ubuntu 22.04 environment, you may encounter corner cases that cause test cases to fail on the autograder. In some cases, the staff may direct you to set up an Ubuntu 22.04 Virtual Machine if you have not done so and are stuck on some assignments. Ultimately, it is your responsibility to read documentation and install supported tools. This tutorial is meant to help you walk through the creation of an x86_64 Ubuntu 22.04 environment. This tutorial is most useful for deploying covey.town, which is easiest on a free-tier AWS instance created using the “Cloud” option in this tutorial. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html",
    "relUrl": "/tutorials/ubuntu.html"
  },"98": {
    "doc": "Ubuntu Setup Guide",
    "title": "Two Options — Local or Cloud",
    "content": "There are two options that this tutorial covers: . | Option 1: Local: Set up a local Ubuntu 22.04 Virtual machine on your computer. This is the most popular option for individual assignments, but the individual assignments typically work in most environments (so you probably don’t need to do this unless you run into a problem). It has a nice UI that makes it easy to navigate. | Some students may have WSL Ubuntu set up. It is a different version of Ubuntu and may or may not work for this class: we recomend that you follow the instructions below if you run into trouble. However, your experience setting it up will help you here! | Some student reports that VirtualBox is not compatible with the new Macbooks (e.g., with M1 and M2 chipsets). If you are using such a Macbook, you may have to select the Option 2 below and use the Cloud instead of your local machine. | Some students have experience with docker. Unfortunately, docker will not suffice here (but experience with it will help you): follow the instructions below. | Some students already have other versions of Ubuntu installed. Covey.town will probably work fine on these other versions, but again if you run into trouble you should follow these instructions. | . | Option 2: Cloud: Set up an Amazon EC2 cloud instance with Ubuntu 22.04 running on it. This option will work if you have a slower or older computer. Start early; Amazon takes up to 24 hours to verify cloud computing accounts. This option involves more of a command-line interface but typically runs some course tools a bit faster than local machine. This option also has the advantage that you can easily run a webserver (or other publicly-accessible webservice, such as covey.town!) from an EC2 instance. | . Both options should work with all assignments in this course. Option 1 (local VM) will have you install VirtualBox on your computer, download an Ubuntu 22.04 installation image, and install x86_64 Ubuntu 22.04 in your virtual machine. A reasonably modern computer (e.g., at most 5 years old) should be able to run a VM guest without issue. However, some students report that the VM executes too slowly (e.g., the mouse is laggy, keystrokes are missed, programs take too long, etc.). If your VM guest is too slow, you can consider using Option 2 instead (see below). First, you may want to read the summary of virtual machines and cloud computing below. Even if you are familiar with the concepts from previous experiences, this course may use slightly different terminology, and I recommend that you skim the material (click on the box below to see the background material). Background: Virtual Machines and Cloud Computing A Virtual Machine is an emulation of a computer system. Loosely, you can think of a VM as a program that can run an entire virtual computer system. Virtual machines are powerful software systems that enable running software designed for one operating system inside another operating system. For example, you can use your Windows host computer to run a Virtual Machine that contains a Linux operating system. Consider the image below: . This is a Windows 10 host_computer running three different Virtual Machine _guests. The guest instances are complete (virtual) environments that are isolated from the host. All of the guests share the host’s hardware as they execute — each window in the screenshot above lets you interact with a separate emulated guest. Thus, even though the host is a Windows computer, you can use one of the guests to execute Linux software inside the guest. Virtual Machines can be used in many combinations. You can have a Windows, Linux, or Mac host computer, and run arbitary numbers and combinations of Linux and Windows guests. Finally, guests are stored as files in the host computer — this means you can move your VM guest from one host to another by transferring that file around. Option 1 (“Local”): You can choose to set up and run your own Ubuntu 22.04 virtual machine locally. This will allow you complete all of the assignments in this course within that virtual machine. However, some students report that the VM guest runs too slowly (especially if you do not have enough RAM in your computer). If you find that a local VM is too slow, you can use Option 2 instead. Virtual machines are a critical part of Cloud computing. You can “rent out” computing resources from a provider like Amazon EC2 or Microsoft Azure to do whatever computation you might need. Amazon EC2 and Microsoft Azure both offer you virtual machine guests that run on their hardware. Thus, you can get access to a virtual machine running whatever operating system you like to run a variety of software. Option 2 (“Cloud”): If you find that a local VM is too slow, you can instead get a free Ubuntu 22.04 virtual machine from Amazon EC2 (or any other cloud computing provider, but this specification walks you through how to do it on EC2). Amazon EC2 (“Elastic Cloud Compute”) is a service that lets you buy and configure virtual machines. Option 2 has you setup and launch an Ubuntu 22.04 cloud instance (this is free if you are a student). Many of the assignments are easier to complete on Linux or similar command-line systems. If you’re not comfortable with such systems, the background tab below on Linux Fundamentals might be useful: . Background: Linux Fundamentals Vanderbilt professor Kevin Leach has prepared a (long) video that provides a gentle introduction to a number of Linux concepts that are relevant to this course. This video is optional, but you may find it useful if you are less familiar with the Linux environment. There are timestamps in a comment below the video that contain points of interest, such as: . | terminals | environment variables | scripts in the shell | compiling programs from source | using ssh | . The first half is more about terminals and shells (why do we have to type ./a.out? why can’t we just say a.out?), and the second half is more about compiling programs from source. The video also covers elinks in particular, which is a terminal-based browser program (using elinks is not required for this course, but it might be helpful if you choose to use a cloud computer and need to access the web to e.g., submit an assignment). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#two-options--local-or-cloud",
    "relUrl": "/tutorials/ubuntu.html#two-options--local-or-cloud"
  },"99": {
    "doc": "Ubuntu Setup Guide",
    "title": "Option 1 — Local Virtual Machine",
    "content": "You can set up your own local virtual machine for free. However, before you proceed, consider checking whether your CPU supports accelerated virtualization. If your CPU does not support virtualization extensions, then your VM may run slowly. If that’s the case, consider Option 2 for this assignment instead. You will need: . | A copy of VirtualBox for your operating system. General download link (look under “Platform Package” or similar). | A copy of 64-bit Ubuntu 22.04 (Download — 64-bit is required here: don’t use 32-bit). This is a large .iso file that might take a long time to download. You don’t need it until part way through the installation process, but you should start the download now. | When something goes wrong during this installation, we recommend that you search this webpage and also look for previous posts on the forum. Some solutions may be listed a little lower on the webpage than when you encounter them. Macs typically give students many more issues than Windows machines, so if you are a student using a Mac, looking to see if the issue is already addressed can be a big time saver. | . VirtualBox . VirtualBox is a Virtual Machine Manager. You install VirtualBox on your host computer (i.e., as a regular program or app). Then, you use VirtualBox to create a virtual machine guest. Once you have created a guest, you install Ubuntu 22.04 inside of the guest. Then, you can start the guest and have a complete Ubuntu 22.04 environment within that guest. Isolation in Virtual Machine Guests Note well: Implicit here is that the guest is, to some extent, isolated from the host. This is very important and entails a number of conceptual hurdles if you are not used to virtualization: . | The clipboard is isolated. That is, if you copy something from your host environment, you cannot paste it inside the guest environment. This is because the VM guest is a completely independent operating system environment from your host. | Typing and mouse movements have to be captured by the guest. | If you want to download a file to use in the guest, you must do so from the guest environment. Unless you set up a shared drive (which is not required), you have to download or create files within the guest environment rather than the host environment. | . Installing VirtualBox . You can install VirtualBox with the default settings. For your reference, screenshots of the course staff completing the installation are shown below: . If you receive a “The installation failed.” message on a Mac, you can resolve the issue by going to Security and Privacy and allowing the installation. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#option-1--local-virtual-machine",
    "relUrl": "/tutorials/ubuntu.html#option-1--local-virtual-machine"
  },"100": {
    "doc": "Ubuntu Setup Guide",
    "title": "Creating a Virtual Machine",
    "content": "After installing VirtualBox, it will display the main VM Management console, which we can use to create a New Machine (see circular highlight in upper left): . Next, configure your virtual machine. Select “Type” as “Linux” and “Version” as “Ubuntu 64-bit”. (If you only see options for 32-bit and do not see options for 64-bit, you will not be able to complete this option and will instead have to use the Amazon EC2 Cloud instance option. This happens to some students with older 32-bit Mac machines that cannot emulate 64-bit guests.) You can name your VM whatever you like (though note that the name in the picture is from a different course than this one that uses the same setup). We recommend using at least 2048MB of Memory. See highlights below: . Next, it will ask you to create a storage device. Remember, you are creating a virtual machine — an entire simulated computer. That includes simulating a hard disk for storage. This is represented as a large (&gt; 20GB file) on your host computer. We recommend at least 20GB, and you can choose “dynamically allocated” to save space: . After this step, you will have successfully created a Virtual Machine. Now, you have a bare system with nothing installed on it. Next, we must install an OS on it to run the VM. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#creating-a-virtual-machine",
    "relUrl": "/tutorials/ubuntu.html#creating-a-virtual-machine"
  },"101": {
    "doc": "Ubuntu Setup Guide",
    "title": "Installing an OS in the Guest VM",
    "content": "After creating a VM, we need to install Ubuntu 22.04 on it to help run software. Remember downloading a large .iso file as indicated above when we discussed downloading Ubuntu (if you missed it, you should go back and download it now)? This is a Disk Image — we need to attach the OS Disk Image into the VM. On the VM Management window, right click the VM you just created, and click “Settings”: . Next, click on “Storage”, then click on the “Empty IDE Controller” (your version of VirtualBox may call this a CD drive, Optical storage drive, or similar. Regardless, you should be able to select a virtual disk image). Click the Disk icon, then click “Choose disk file…”: . Then, select the Ubuntu .iso file you downloaded earlier. This places the Ubuntu 22.04 installation medium in the VM’s disk drive. Click OK, and you are now ready to start your VM from the Manager (note: the image below is from a previous version of the course that used Ubuntu 16.04 instead of Ubuntu 22.04. When you do this, your .iso file must be for Ubuntu 22.04.): . If you receive a “Kernel driver not installed” error, follow these instructions online for how to resolve the issue. (The image below shows the “Kernel driver not installed” error, for your reference.) . The Virtual Machine will now boot and load the Ubuntu 22.04 installation. The VM opens in a new window — you can think of this window as the virtual “screen” that lets you see what’s happening in the emulated system. You can follow through the normal Ubuntu 22.04 installation: . Note: If the VM asks you to select a startup disk, you need only select your .iso file. You want the VM to boot from the installation media so you can install Ubuntu within the guest. We recommend opting to install updates and third-party software. It should not affect the system one way or another: . You can select “Erase disk and install Ubuntu”. This is only referring to erasing the “virtual” disk you created earlier with the VM. If you are receiving an error like the “following disc images couldn’t be opened for the reason of no mountable file systems”, you may be able to resolve the issue by following recommendations online . Note: Sometimes during installation, students find that a window is too large to display all the buttons. You can actually move the window like normal to reveal the Continue button (just click to drag the window like any other — the window inside the Virtual Machine, not the Virtual Machine itself): . Next, it will ask you to create an account for logging in. You can put whatever credentials you like here — it will not have any bearing on your host computer. This is merely for an account on the guest VM. Just make sure you don’t forget whatever password you choose! . Next, you just wait a bit for the OS to install inside the guest. It might take a few minutes to complete. Eventually, you’ll see a screen asking you to remove installaton media and restart. You can just click restart (on the guest) and you’ll be all set! . Virtual Machines and Mice While you’re running the VM, you may find that it “takes control” of your mouse and keyboard, and you aren’t able to leave the window. If this happens, press CTRL+ALT to release control from the VM window. (The keystrokes may be different on Mac OS). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#installing-an-os-in-the-guest-vm",
    "relUrl": "/tutorials/ubuntu.html#installing-an-os-in-the-guest-vm"
  },"102": {
    "doc": "Ubuntu Setup Guide",
    "title": "Install VirtualBox Additions",
    "content": "One thing you’ll notice when you install your VM successfully is that the window is small. In our opinion, one thing that makes the experience way better is the VirtualBox Additions package. It provides a number of “Quality of Life” features when using VMs. It’s essentially a helper program you install inside the VM guest that makes it “aware” that it’s running inside of a VM. To install, click “Devices”, then “Insert Guest Additions CD Image…” . Eventually, a window pops up asking if you want to run the media. Just click Run. After installing, you can reboot the VM image. One more step to make sure gcc (a compiler for C and C++ programs) is installed in your guest. In a terminal, use: . sudo apt-get update sudo apt-get install gcc . You’re all set! . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#install-virtualbox-additions",
    "relUrl": "/tutorials/ubuntu.html#install-virtualbox-additions"
  },"103": {
    "doc": "Ubuntu Setup Guide",
    "title": "Option 2 — Amazon EC2",
    "content": "Note well: This option will take longer than Option 1. Amazon AWS accounts can take up to 24 hours to verify, which means you may have to wait before you can use it for an assignment or demo. Start early! . You will need a Secure Shell (SSH) client. SSH allows you to remotely interact with a server. (If you’ve never used SSH before, scrolling back up the page and watching the appropriate section of the “Linux Fundamentals” video might help.) When you SSH to a remote computer, you have access to a command prompt that runs software on that computer. We will be using SSH to interact with a virtual machine we create in the cloud with Amazon EC2. On Windows, I recommend using WSL to run SSH. You can also use PuTTY. On Mac, you should already have ssh installed. Open a terminal and you can run ssh. On Linux, you can use ssh, but you may need to install it first (e.g., sudo apt-get install openssh or similar, depending on your platform). It is your responsibility to understand how to use SSH, though we give some pointers below. Amazon EC2 is a cloud computing service that allows you to rent virtual machines that you can ssh to and run programs like any other computer. Amazon offers a large number of cloud-based services all under the umbrella of AWS (Amazon Web Services). EC2 is a subset of AWS. In this section, you will create an AWS account to manage EC2 virtual machines. You can sign up for a new account on Amazon EC2, and in doing so, you get 12 months of free access to a virtual machine that is enough to complete the assignments in this course. If you do not already have an Amazon EC2 account, navigate to https://aws.amazon.com/ec2/ and click “Create new account” in the upper right. Complete the sign up process. You may be prompted for credit card information, however you should not be charged as long as you create only one virtual machine on the free tier. You then will have access to the Amazon AWS Console. If you are prompted, you want to sign in as a “Root” user for the AWS console. AWS Account Creation Note that it can take 24 hours for Amazon to verify your account. We believe this is because they manually review account creation — after all, they are giving you access to computing resources. Since cloud services are easily abused (e.g., for spam emails, command and control virus management, and distributed denial of service attacks), Amazon applies a bit of scrutiny to AWS users. Start early! . Notice: AWS Web GUI Changes Some of the screenshots in this guide are from older versions of the AWS Web Interface. The GUI changes fairly frequently and so your view may look a little different from the screenshots. Everything is fine and it’s good practice to follow along with documentation that is not an exact match. The course staff verified that the instructions work and pass the HW0 autograder most recently on 8/27/2022. If you believe you’ve discovered a problematic difference between this guide and the current version of the AWS GUI, contact your TA. Creating a New VM . Now that you have created an account, you can use the AWS Console to help manage and launch virtual machine instances. We will walk you through the steps to create an Ubuntu 22.04 VM below. (1) Open the AWS Console . After you create an AWS account, you can visit the AWS Console at https://console.aws.amazon.com. At the console, you should be greeted with a large screen full of many services. See highlight on left: . Click here to see AWS Console screenshot . (2) Open the EC2 Manager . From the AWS Console, click the “EC2” link to open the Elastic Cloud Compute manager. The EC2 Manager lets you manage and launch Instances, which are virtual machines that you configure. The first thing we need to do is configure and launch a new instance. Click the Launch Instance button. Click here to see EC2 Manager screenshot . (3) Choose an Ubuntu 22.04 LTS Instance . This is the most important step. You must select an Ubuntu Server 22.04 LTS (HVM), SSD Volume Type instance. This is a free tier eligible instance that contains an environment suitable for completing the rest of the assignments. Don’t pick other versions of Ubuntu (NOT 18.04 or 20.04, etc.). The autograder uses Ubuntu 22.04 (in an AWS VM!), so if you want the smoothest experience, use that version. As of 1/12/2023, the correct image is the default for Ubuntu: . Click here to see screenshot of the instructor selecting the correct VM image . After that you can fill out the rest of the selection (e.g., making certain to select your key pair for that instance) and then verify that it is in the Free Tier. Click here for \"free tier\" screenshot . (4) Configure Your Instance . After you select the image to launch, it may ask you a few questions about storage (pick the default if so). Usually, it will skip ahead and ask you about instance details. You want to pick the free version, called a t2.micro instance. If you were using cloud computing for a business or another project, you could configure resources like (a) how many CPUs, (b) how much RAM, and (c) what type of storage you get on the VM. For this course, just pick “t2.micro” to get the free level. Click here for instance type selection screenshot . (5) Configure Authentication . After you set up your instance, you need to create a way to login. This is a tricky security problem because Amazon wants to give you root (Administrator) access to your new instance. The way they do this is by using asymmetric key encryption. Basically, Amazon will let you download a file that serves as your credentials. Rather than entering a password, you will provide this special file to let you login. If you’d like to learn more about asymmetric key encryption, take a security course. Now, you will be prompted to set up credentials for logging in. Select Create a new key pair and type in any name (the examples use “eecs481” in the screenshots below). (If you are given a key type option, like “RSA” vs. “ED22519”, pick “RSA”.) Then, click Download Key Pair. It is imperative that you keep this file in a secure location. Do not upload it to GitHub, do not move it around. This is basically like a password for accessing your instance — you wouldn’t want someone malicious to access your instance and do something bad with it (you would be legally responsible for whatever they did!). Click here for keypair creation screenshot . Once you had downloaded your Key Pair, you should be able to Launch your instance. Do so and continue. There is a screenshot below showing what you should see after launching your instance. Click here for launch confirmation screenshot . (6) Connect to Your Instance . At this point, you have set up an Ubuntu 22.04 instance on EC2 and created associated credentials. You now have a virtual machine running in the cloud that you can connect to. You will use ssh to connect to your instance. This is the recommended way — you could technically install a front-end and use remote desktop software, however we strongly recommend using the command line, since you will be using the CLI in many of the course assignments. From the EC2 Management Dashboard, right-click your running instance. You should see a menu pop up like below: . Click “Connect”. It will pop up a window giving you a number of options. Pick the “SSH Client” tab to see how to connect via ssh: . On this window, you will see the hostname of your EC2 instance to which you can ssh, as well as a number of instructions for connecting. Mac permissions errors Some students, especially those using Mac computers, report receiving permission errors when they try to SSH into their EC2 instances: . In this case, a command like . chmod go-rwx /path/to/eecs481.pem . usually resolves the issue. More information is available online about this SSH issue. Using Windows WSL to SSH to EC2 If you are using Windows Subsystem for Linux (WSL) to connect to your Amazon EC2 instance, you must prepare your key file before connecting. Our recommendation is to run the following (but use your path): . mkdir -p ~/.ssh/ cp /path/to/your/downloaded/eecs481.pem ~/.ssh chmod 400 ~/.ssh/eecs481.pem . Windows WSL does not apply Linux file permissions correctly unless you are dealing with files contained within the Linux FS. Moving your key to ~/.ssh/ will allow you to chmod 400 appropriately. The SSH client will not allow you to connect to any server using that key if it does not have the correct permissions. Recall you downloaded a .pem file when you set up authentication for your instance (see part 5 above). You must specify this file on your SSH client to connect to your instance. First, you must provide the correct access permissions to the .pem file. Usually, this means running chmod 400 /path/to/your/.pem. Once you do so, you can use the ssh command directly: . ssh -i /path/to/your/.pem ubuntu@&lt;your-EC2-hostname-here&gt; . (You must substitute in the path to your downloaded .pem file as well as the hostname of your EC2 instance, which takes the form of ec2-X-Y-Z.us.W.compute.amazonaws.com for some values of W, X, Y, and Z. Collect these values from the EC2 Console.) . If you receive an error that the path is “too long for Unix domain socket” or the like, open ~/.ssh/config in a text editor and modify the control path to match this (reference): . Host * ControlPath ~/.ssh/control/%C ControlMaster auto . At this point, you should be logged in to your EC2 Instance! See below for an example of connecting to such an instance from the WSL environment (though note that the machine in the screenshot uses an old version of Ubuntu. Your instance should be version 22.04 (codename: jammy) instead of version 16.04): . Once you’re all finished, you need one more step to install gcc (a compiler for C and C++ programs): . sudo apt-get update sudo apt-get install gcc . You can safely stop the VM instance when you aren’t using it (e.g., between homeworks) and restart it when you are. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#option-2--amazon-ec2",
    "relUrl": "/tutorials/ubuntu.html#option-2--amazon-ec2"
  },"104": {
    "doc": "Ubuntu Setup Guide",
    "title": "Final Remarks",
    "content": "There is some systems programming in this course. We will use a mixture of command line tools, multiple languages, and other large projects that you may not have seen, written, or used before. That’s the point. In software engineering, much of your day-to-day work will involve reading code and documentation, as well as getting things set up to run. We are big believers that this type of experience is some of the most valuable you can acquire as a student — it makes you more productive at other tasks. This tutorial is not meant to take more than 2 hours (excluding the time taken to download the Ubuntu 22.04 .iso in Option 1, or the Amazon AWS signup time in Option 2). Please contact us on Discord if you have any questions! . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/ubuntu.html#final-remarks",
    "relUrl": "/tutorials/ubuntu.html#final-remarks"
  },"105": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "A user story is an informal, general explanation of a software feature written from the perspective of the end user or customer. A user story is always of the following form: . As a &lt;role&gt; I can &lt;perform action&gt; so that I can &lt;receive benefit&gt; . User stories represent something the user/customer might want. There will be many ways to give the user/customer the benefit that they want. We need to refine these in order to determine what to build. We call these refinements “conditions of satisfaction” (COS) . A COS should be a specific capability or behavior that the user expects, in the user’s terms. It should be visible to and verifiable by the user. The COS is a guide to the implementation team. It should be specific enough so that the implementation team has a clear idea of what they are building. There still may be many ways to implement a COS. For example, a COS probably would not specify any of the graphic or layout details; these would likely be left to the implementation team. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#user-stories-and-conditions-of-satisfaction",
    "relUrl": "/tutorials/user-stories#user-stories-and-conditions-of-satisfaction"
  },"106": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Project Planning",
    "content": "In planning a project, need to assign priorities to each user story and Condition of Satisfaction. Priorities tell us the order in which COS and their associated engineering tasks should be addressed, and how much effort should be devoted to each of them. There are many ways to describe priorities. For example, a user story might be described as Essential, Desirable, or Extension: . | Essential means the project is useless without it. | Desirable means the project is less usable without it, but is still usable. | Extension describes a User story or COS that is desirable, but may not be achievable within the scope of the project. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#user-stories-and-project-planning",
    "relUrl": "/tutorials/user-stories#user-stories-and-project-planning"
  },"107": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Minimum Viable Product (MVP)",
    "content": "An MVP is a product that consists of all essential user stories. Developers should prioritize those above others. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#minimum-viable-product-mvp",
    "relUrl": "/tutorials/user-stories#minimum-viable-product-mvp"
  },"108": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Test-Driven Development",
    "content": "We model the development process as a cycle of refinements: . | User Stories | Conditions of Satisfaction | Testable behaviors | Executable Tests | Engineering Tasks (Code) | . As we proceed down these refinements, we will likely go back and revisit design decisions that we made at earlier stages. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#user-stories-and-test-driven-development",
    "relUrl": "/tutorials/user-stories#user-stories-and-test-driven-development"
  },"109": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Examples",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#examples",
    "relUrl": "/tutorials/user-stories#examples"
  },"110": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories:",
    "content": "User Story #1: . As a manager, I want to track my subordinates’ progress, so that the organization’s business goals are met. [Probably too general; in the agile terminology, this might be an “epic”, which is then refined into a set of user stories] . User Story #2: . As a player in covey.town, I want to be able to play a game of connect4 with another player, so that I can pass the time enjoyably. (Essential) . User Story #3: . As a player in covey.town, I want to see how well I’m doing at connect4 compared to other players, so I can feel superior to them. (Desirable) . User Story #4: . As a player in covey.town, I want to learn different strategies for connect4, so I can win more games. (Extension) . User Story #5: . As a user of Covey.Town, I want to be able to interact with other users in different activities like private chat, playing games, etc. while providing ability to customize user avatars to make the town more fun. (Essential but too general. Best to split it in 3 different stories one for private chat, one for games and one for customization.) . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#user-stories",
    "relUrl": "/tutorials/user-stories#user-stories"
  },"111": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "Conditions of Satisfaction:",
    "content": "For User Story #2: . | There should be a Connect4 area in the town, where players can play Connect4. (Essential) | Whenever there are two players in the same Connect4 area, a Connect4 game is started between them. (Essential) | The status of the Connect4 game is presented in graphical form on the screen (Essential). | When one player wins (or there is a draw), both players are notified of the result. (Essential) | When a player makes a move in the Connect4 game, the tile visibly drops onto the game board, and a suitable sound effect is emitted (Extension) | If other players enter a Connect4 area while a game is going on, they can see the status of the game also (Desirable) | . [Note: these COSs do not describe the game board in detail, though that is pretty standard. They also do not describe what happens to the two players when the game is over. Do they stay in the area and spectate? Do the next two players play? Does the first spectator play the winner of the game? etc. etc.] . | There should be a way for one player to challenge another to play the game of Connect4, no matter where they are in the town. (This might be an Extension, or it might be a different user story). | . For User Story #3: . | There should be a leaderboard showing the Connect4 ranking of all the players in the town. (Essential). | The leaderboard should show the current score of all the Connect4 games currently in progress. (Desirable) | The leaderboard should show the current score of all the Connect4 games currently in progress, and any player can click on the entry for a game and spectate that game. (Desirable; might be Extension, depending on the expertise of the team). | The leaderboard should show the lifetime standings of all the players who have ever logged in to this town. (Extension) | . For User Story #5: . | User will be able to join an interactable area which includes leaderboards for all activities (This is too general and should be split in several conditions of satisfactions. For example, joining an area itself can be independent of being able to view leaderboard. Also each activity’s leaderboard should have its own condition of satisfaction. There could be several conditions for leaderboard alone to describe how data is organized) | User is able interact with an instance of interactable area created by another player (This COS is vague. What does interact mean? Does it mean enter an area or do something else?) | User is allowed to join an interactable area of another player in a town if the user was not invited (this sounds wrong, opposite to what the system should be doing) | User is allowed to join an interactable area (Desirable, The priority is wrong. For a user story that requires joining an interable area before anything else, this condition should be considered essential, instead of desirable) | . Reference . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories#conditions-of-satisfaction",
    "relUrl": "/tutorials/user-stories#conditions-of-satisfaction"
  },"112": {
    "doc": "User Stories and Conditions of Satisfaction",
    "title": "User Stories and Conditions of Satisfaction",
    "content": "This tutorial provides examples for user stories, conditions of satisfaction and how a minimum viable product can be defined. It might be useful when preparing your project proposal. Contents: . | User Stories and Conditions of Satisfaction | User Stories and Project Planning | User Stories and Test-Driven Development | Examples | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/user-stories",
    "relUrl": "/tutorials/user-stories"
  },"113": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS",
    "content": "Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. For this class, you will need Node.js version 18 (18.17.1 is the latest version at time of writing, although any 18.x should work in theory). There are many ways that you can install Node.js: for instance, you can use a package manager like snap or homebrew to install it; you can download an installer directly from the Node.js website, and you can, of course, build it from source. However, due to the complexity of running different Node.js versions on the same machine, we very strongly suggest using nvm, as explained below. We recommend installing Node.js using nvm, the node version manager. When language runtimes are in active development (like Node.js is), sometimes you end up needing to have multiple versions of Node.js installed, and different projects that you work on might require different versions of Node.js. These annoyances are quite rare, but when it happens that you need to have mutliple versions of Node.js installed, it’s super handy to have your system set up already so that installing multiple versions and switching between it is easy. You can use our instructions to set up nvm even if you have previously installed Node.js. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installing-nodejs",
    "relUrl": "/tutorials/week1-getting-started.html#installing-nodejs"
  },"114": {
    "doc": "Installing a Development Environment",
    "title": "Installing NodeJS with NVM for Windows",
    "content": ". | Download nvm-setup.zip from the most recent release of nvm-windows (at time of writing this document, version 1.1.11). | . | Extract the contents of nvm-setup.zip and run the executable nvm-setup.exe. | This should open the nvm installation wizard. | . | Accept the license agreement and click next. Continue to accept the default choices for any remaining prompts, and click “install”. If you receive messages along the lines of “NodeJS version XYZ is already installed, would you like nvm to control this installation,” select “Yes”. | Upon completion, you will see the below window . | . | Open a command prompt with administrative privileges (type cmd in the windows start bar, then select “Run as administrator”). | Verify the installation, run the command nvm version . | This should display the version of nvm installed (in the image, 1.1.9; yours should say “1.1.11”). | | . | Run the command nvm list available to display all available NodeJS versions. | . | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js available using the command nvm install 18.17.1. | To use this version of NodeJS, run the command nvm use 18.17.1. | Now, NodeJS should be installed and ready for use. To verify the installation run the below commands: . | node -v | npm -v | . | . Troubleshooting with VSCode: Did you follow these instructions successfully, but find a “Command not found” error when you try to run npm in VSCode? Try this: Close VSCode completely. Re-open it. In your command shell in VSCode, try again. We have noticed that if you have VSCode open while installing nvm, it is possible that VSCode will not see the new software installation until it’s closed and re-opened. You can also confirm that VSCode correctly sees the NodeJS installation by running echo %PATH% in your windows command shell in VSCode: it should include an entry similar to C:\\Program Files\\nodejs. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installing-nodejs-with-nvm-for-windows",
    "relUrl": "/tutorials/week1-getting-started.html#installing-nodejs-with-nvm-for-windows"
  },"115": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Linux / Mac)",
    "content": ". | Run either curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash or wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash. | Close and reopen a terminal. | Verify nvm is working by entering command -v nvm. If your terminal prints out nvm, it should be working. If you see nvm: command not found or no feedback, open a new terminal and trying again or restart from step 1. | Install the latest LTS (Long term supported, as opposed to the “development”) version of Node.js by typing nvm install 18. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installation-steps-linux--mac",
    "relUrl": "/tutorials/week1-getting-started.html#installation-steps-linux--mac"
  },"116": {
    "doc": "Installing a Development Environment",
    "title": "Verification",
    "content": ". | Open a shell or windows powershell. | Run the command node -v . | This should print the current version of nodeJS installed (v18.x.x) | . | Run the command npm -v . | This should print the current version of npm installed (v8.x.x) | . | If you find that some other version is being used, and would like to change the default to 18, run the command nvm alias default 18 | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#verification",
    "relUrl": "/tutorials/week1-getting-started.html#verification"
  },"117": {
    "doc": "Installing a Development Environment",
    "title": "Installing Visual Studio Code (VSCode)",
    "content": "Visual Studio Code is a lightweight but powerful source code editor which runs on your desktop and is available for Windows, macOS and Linux. It comes with built-in support for JavaScript, TypeScript and Node.js and has a rich ecosystem of extensions for other languages (such as C++, C#, Java, Python, PHP, Go) and runtimes (such as .NET and Unity). VSCode also supports importing hotkey configurations from most other text editors and IDEs. Read more here. While you should use an IDE for this class, it is not mandatory to use VSCode: if you already are comfortable developing TypeScript or JavaScript in another suitable IDE (like IntelliJ), then you are welcome to continue to use that. However, VSCode is the “supported” option: if you struggle to get things like the linter set up correctly in VSCode, we will be happy to help you. However, we can’t provide such support for all IDEs. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installing-visual-studio-code-vscode",
    "relUrl": "/tutorials/week1-getting-started.html#installing-visual-studio-code-vscode"
  },"118": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | Administrative access on the host machine for software installation. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#pre-requisites",
    "relUrl": "/tutorials/week1-getting-started.html#pre-requisites"
  },"119": {
    "doc": "Installing a Development Environment",
    "title": "Installation Steps (Windows / Mac)",
    "content": ". | Download the VSCode installer from the VSCode website. | . | Run the installer to start the installation wizard for VSCode . | . | Accept the license agreement and click next. | . | Choose the installation directory of your choice and click next. | . | Click next on the select start menu folder screen. | . | Tick all check boxes on the select additional tasks menu and click next. | . | Review the settings on the the “Ready to install” screen and click Install to begin installation. | Once the installation is complete, you will see the below screen and you are ready to use VSCode. | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installation-steps-windows--mac",
    "relUrl": "/tutorials/week1-getting-started.html#installation-steps-windows--mac"
  },"120": {
    "doc": "Installing a Development Environment",
    "title": "Installation (Linux)",
    "content": ". | The above instructions for Windows/Mac should also work, but VSCode is also provided as a snap package | . | Install snap if you haven’t already by running sudo apt update and then sudo apt install snapd. | Install VSCode by running sudo snap install --classic code. | Open VSCode as an application on your desktop. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installation-linux",
    "relUrl": "/tutorials/week1-getting-started.html#installation-linux"
  },"121": {
    "doc": "Installing a Development Environment",
    "title": "Additional Extensions (Optional)",
    "content": "VSCode comes with a rich set of extensions to aid in software development. Below is a list of extensions that you may find useful. | GitLens - Git Supercharged | Prettier - code formatter | vscode-icons | ESLint | Andromeda (Color theme: Andromeda Colorizer) | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#additional-extensions-optional",
    "relUrl": "/tutorials/week1-getting-started.html#additional-extensions-optional"
  },"122": {
    "doc": "Installing a Development Environment",
    "title": "Installing Extensions (eg. ESLint)",
    "content": ". | Click on the extensions tab on the left in VSCode. | Search ESLint. | Click on Install. | Done! . | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installing-extensions-eg-eslint",
    "relUrl": "/tutorials/week1-getting-started.html#installing-extensions-eg-eslint"
  },"123": {
    "doc": "Installing a Development Environment",
    "title": "Getting Started With Typescript",
    "content": "Typescript is a superscript of JavaScript which adds type information and other features. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#getting-started-with-typescript",
    "relUrl": "/tutorials/week1-getting-started.html#getting-started-with-typescript"
  },"124": {
    "doc": "Installing a Development Environment",
    "title": "Pre-requisites",
    "content": ". | NodeJS | VSCode (recommended but not required) | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#pre-requisites-1",
    "relUrl": "/tutorials/week1-getting-started.html#pre-requisites-1"
  },"125": {
    "doc": "Installing a Development Environment",
    "title": "Installation",
    "content": ". | Open VSCode and press the ctrl + ~ (Tilde or back tick key) to open a terminal. | Optionally you can open a separate shell (Do not use powershell) | . | Run the command npm install -g typescript in the terminal. | Typescript should now be installed globally and accessible from the terminal. | . | Verify the installation using the command tsc -v in the terminal. (Do NOT use powershell) . | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#installation",
    "relUrl": "/tutorials/week1-getting-started.html#installation"
  },"126": {
    "doc": "Installing a Development Environment",
    "title": "Hello World",
    "content": ". | Create a new directory and open it with VSCode. | Create a new file called hello-world.ts | Add the following code to the file: console.log('Hello, World!'); . | Open the terminal with ctrl + ~. | Ensure that you are in the same directory as hello-world.ts. | . | Run the command tsc hello-world.ts . | This will generate a JS file called hello-world.js | . | Run the file with node using the command node hello-world.js. | This will give the result below. | | . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html#hello-world",
    "relUrl": "/tutorials/week1-getting-started.html#hello-world"
  },"127": {
    "doc": "Installing a Development Environment",
    "title": "Installing a Development Environment",
    "content": "This tutorial describes the basic steps needed to set up a development environment with NodeJS, TypeScript, and VisualStudio Code. At the end of this tutorial, you should have a complete local development environment that you can use to build and test code for this class. Contents: . | Installing NodeJS | Installing Visual Studio Code | Hello, World in TypeScript | . If you run into any difficulties following any of these steps, please post (in a non-private question) on Discord. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-getting-started.html",
    "relUrl": "/tutorials/week1-getting-started.html"
  },"128": {
    "doc": "Typescript Basics",
    "title": "Typescript Basics",
    "content": "This tutorial describes the basic concepts and syntax of typescript with code examples. Typescript is treated here as an extension of JavaScript, but it requires no prior knowledge to follow along. You can run the examples on Online Typescript Editor . Contents: . | Types in Typescript . | Boolean | Number | BigInt | String | Arrays | Tuples | Enums | Any | Unknown | . | Variable declaration in typescript | Objects | Control Flow Statements . | Equality vs Strict Equality | . | Loops | Array Functions . | ForEach | Map | Filter | Reduce | . | Functions . | Typing the function | Invoking the function | Optional and Default Parameters | Rest Parameters | Functions as Constructors | Arrow Functions | Function Overloads | . | Classes . | Creating a class | Creating an abstract class | . | Type Aliases | Interfaces | Custom types | Generics | Modules | Object oriented programming concepts using typescript . | Inheritance | Polymorphism | Abstraction | Encapsulation | . | General Guidelines | . Typescript is a superset of JavaScript. Thus, all JavaScript code is valid Typescript code. Typescript introduces concepts of optional typing, modules, and few additional features to Javascript. Let us begin by extending JavaScript to use the features of Typescript and primitive types. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html",
    "relUrl": "/tutorials/week1-typescript-basics.html"
  },"129": {
    "doc": "Typescript Basics",
    "title": "Types in typescript",
    "content": "Boolean . The boolean type has two values: true and false. Example: . let a = true // boolean var b = false // boolean const c = true // true let d: boolean = true // boolean let e: true = true // true . | Usage: You can compare them (with ==, ===, ||, &amp;&amp;, and ?), negate them (with !). | . Number . Number is the set of all numbers: integers, floats, positives, negatives, Infinity, NaN. Example: . var b = Infinity * 0.10 // number const c = 5678 // 5678 let d = a &lt; b // boolean let e: number = 100 // number let f: 26.218 = 26.218 . | Usage: Numbers can do things, like addition (+), subtraction (-), modulo (%), and comparison (&lt;). When working with long numbers, use numeric separators to make those numbers easier to read. | . BigInt . The bigint type is the set of all BigInts, and supports things like addition (+), subtraction (-), multiplication (*), division (/), and comparison (&lt;). Example: . let a = 1234n // bigint const b = 5678n // 5678n var c = a + b // bigint let d = a &lt; 1235 // boolean let e = 88.5n // Error TS1353: A bigint literal must be an integer. let f: bigint = 100n // bigint let g: 100n = 100n . | Usage: It lets you work with large integers without running into rounding errors. While the number type can only represent whole numbers it can hold numbers larger than 253 – 1. | . String . String is the set of all strings and the things you can do with them like concatenate (+), slice (.slice),etc. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: Any functionality that requires the functionality of a string of characters. Here are a couple of string operations: | . charAt() : This method returns the character from the specified index. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string, called stringName, is stringName.length – 1. Syntax: . string.charAt(index) . slice() : This method extracts a section of a string and returns a new string. Syntax: . string.slice( beginslice [, endSlice]) . split() : This method splits a String object into an array of strings by separating the string into substrings. Syntax: . string.split([separator][, limit]) . concat(): This method adds two or more strings and returns a new single string. Syntax: . string.concat(string2, string3[, ..., stringN]) . indexOf(): This method returns the index within the calling String object of the first occurrence of the specified value, starting the search at index or -1 if the value is not found. Syntax: . string.indexOf(searchValue[, fromIndex]) . Arrays . Like in JavaScript, TypeScript arrays are special kinds of objects that support things like concatenation, pushing, searching, and slicing. Arrays are iterable Objects with the keys as numbers. Example: . let a = [1, 2, 3] // number[] var b = ['a', 'b'] // string[] let c: string[] = ['a'] // string[] let d = [1, 'a'] // (string | number)[] const e = [2, 'b'] // (string | number)[] let f = ['red'] f.push('blue') let g = [] // any[] g.push(1) // number[] g.push('red') // (string | number)[] let h: number[] = [] // number[] h.push(1) // number[] . Tuples . Tuples are subtypes of array. They’re a special way to type arrays that have fixed lengths, where the values at each index have specific, known types. Unlike most other types, tuples have to be explicitly typed when you declare them. Example: . let a: [number] = [1] // A tuple of [first name, last name, birth year] let b: [string, string, number] = ['malcolm', 'gladwell', 1963] . | Usage: In TypeScript Tuples support optional elements too. Just like in object types, ? means “optional”. Tuples also support rest elements, which you can use to type tuples with minimum lengths. Not only do tuple types safely encode heterogeneous lists, but they also capture the length of the list they type. | . Enums . Enums are a way to enumerate the possible values for a type. They are unordered data structures that map keys to values. Example: . enum Language { English, Spanish, Russian } . | Usage: There are two kinds of enums: enums that map from strings to strings, and enums that map from strings to numbers. Use it when you wish to provide flexibility making it easier to express and document intentions and use cases or when you want to save compile-time and runtime with inline code. | . Any . The any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable. Example: . let a: any = 666 // any let b: any = ['danger'] // any let c = a + b // any . | Usage: In TypeScript everything needs to have a type at compile time, and any is the default type when you (the programmer) and TypeScript (the typechecker) can’t figure out what type something is. It’s a last resort type, and you should avoid it when possible. | . Unknown . If any is the Godfather, then unknown is Keanu Reeves as undercover FBI agent Johnny Utah in Point Break: laid back, fits right in with the bad guys, but deep down has a respect for the law and is on the side of the good guys. You can compare unknown values (with ==, ===, &amp;&amp;, and ?), and refine them (like you can any other type) with JavaScript’s typeof and instanceof operators. Example: . let a: unknown = 30 // unknown let b = a === 123 // boolean . | Usage: For the few cases where you have a value whose type you really don’t know ahead of time, don’t use any, and instead reach for unknown. Like any, it represents any value, but TypeScript won’t let you use an unknown type until you refine it by checking what it is. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#types-in-typescript",
    "relUrl": "/tutorials/week1-typescript-basics.html#types-in-typescript"
  },"130": {
    "doc": "Typescript Basics",
    "title": "Variable declaration in typescript",
    "content": "Variables can be declared in Typescript using one of 3 keywords: . | var: var declarations are accessible anywhere within their containing function, module, namespace, or global scope - all which we’ll go over later on - regardless of the containing block. Some people call this var-scoping or function-scoping. Parameters are also function scoped. | let: When a variable is declared using let, it uses what some call lexical-scoping or block-scoping. Unlike variables declared with var whose scopes leak out to their containing function, block-scoped variables are not visible outside of their nearest containing block. | const: They are like let declarations but, as their name implies, their value cannot be changed once they are bound. In other words, they have the same scoping rules as let, but you can’t re-assign to them. | . The syntax of declarations is as below: . var &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; let &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; const &lt;name&gt;: &lt;type&gt; = &lt;value&gt;; . Example: . let num: number = 1; const PI: number = 3.14; let x: string = \"This is a string\"; const t: boolean = true; const f: boolean = false; let uninitialized: any; . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#variable-declaration-in-typescript",
    "relUrl": "/tutorials/week1-typescript-basics.html#variable-declaration-in-typescript"
  },"131": {
    "doc": "Typescript Basics",
    "title": "Objects",
    "content": ". | Objects are similar to dictionaries with key-value pairs. | Arrays are iterable Objects with the keys as numbers. | . Examples: . const myObj: any = { key1: 'value1', key2: 'value2' }; console.log(myObj.key1); // prints 'value1' . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#objects",
    "relUrl": "/tutorials/week1-typescript-basics.html#objects"
  },"132": {
    "doc": "Typescript Basics",
    "title": "Control Flow Statements",
    "content": "Typescript contains the following control flow statements: . | If-Else | Switch | Ternary operator: Shorthand for if-else which returns a value. | . If condition syntax: . if(condition) { // executed when condition is true } if(condition) { // executed when condition is true } else { // executed when condition is false } if(condition) { // executed when condition is true } else if(condition2) { // checked only if condition is false // executed when condition2 is true } else { // executed when all conditions in the if-elseif ladder are false. } . Switch case syntax: . switch (variable) { case &lt;case1&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing case &lt;case2&gt;: // executed when value of variable matches &lt;case1&gt; break; // Break is required to prevent all subsequent cases from executing default: // executed if variable does not match any prior cases } . Ternary Syntax: . let x = (condition) ? /* Executed when condition is true */ : /*Executed when condition is false*/; . Examples: . const str: string = \"ABCD\"; if(str === \"ABCD\") { console.log(\"it was true\"); } else { console.log(\"it was false\"); } switch (str) { case \"ABCD\": console.log('It was ABCD'); break; case \"WXYZ\": console.log('It was WXYZ'); break; default: console.log('It was something completely different') } let y: string = (str.includes(\"A\")) ? \"The string contains A\" : \"The string does not contain A\"; // y now contains \"The string contains A\" . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#control-flow-statements",
    "relUrl": "/tutorials/week1-typescript-basics.html#control-flow-statements"
  },"133": {
    "doc": "Typescript Basics",
    "title": "Equality vs Strict Equality",
    "content": "Typescript/JavaScript contain 2 equality operators: . | ==: Compares only the value of entities being compared. | ===: Compares the type and value of entities being compared. | . Example: . if(0 == '0') { } // Evaluates to true despite comparing string to number. if(0 === '0') { } // Evaluated to false because types are different. We recommend using strict equality (===) in all cases, and this recommendation is enforced by our linter. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#equality-vs-strict-equality",
    "relUrl": "/tutorials/week1-typescript-basics.html#equality-vs-strict-equality"
  },"134": {
    "doc": "Typescript Basics",
    "title": "Loops",
    "content": "Typescript contains the following loops: . | For | While | Do-while | . Examples: . for(let i: number = 0; i &lt; 10; i++) { } while(condition) { } do { } while(condition) . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#loops",
    "relUrl": "/tutorials/week1-typescript-basics.html#loops"
  },"135": {
    "doc": "Typescript Basics",
    "title": "Array Functions",
    "content": "ForEach, Map, reduce, and filter are all array methods in JavaScript. Each one will iterate over an array and perform a transformation or computation. Each will return a new array based on the result of the function. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#array-functions",
    "relUrl": "/tutorials/week1-typescript-basics.html#array-functions"
  },"136": {
    "doc": "Typescript Basics",
    "title": "ForEach",
    "content": "forEach() method calls a function for each element in the array. It returns the resultant array. Syntax . array.forEach(callback[, thisObject]); . Example . let num = [7, 8, 9]; num.forEach(function (value) { console.log(value); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#foreach",
    "relUrl": "/tutorials/week1-typescript-basics.html#foreach"
  },"137": {
    "doc": "Typescript Basics",
    "title": "Map",
    "content": "It is an array function that transforms the array according to the applied function and returns the updated array. It works on each element of an array. Syntax . array.map(callback[,object]) . callback - It is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type - List . Examples . //Calculate cube of each element with the help of map. function cube(n){ return n*n*n; } var arr=new Array(1,2,3,4) var newArr=arr.map(cube); console.log(newArr) // Output : [1,8,27,64] . In the above example, a function called “cube” is created and then is passed as a callback function into map(). ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#map",
    "relUrl": "/tutorials/week1-typescript-basics.html#map"
  },"138": {
    "doc": "Typescript Basics",
    "title": "Reduce",
    "content": "It also works on a callback for each element of an array. It reduces the result of this callback function from one array element to the other. Syntax . array.reduce(callback[,initalValue]) . callback - this parameter is the function to execute on each value in the array. intitalValue - this parameter is the object to use as the first argument of the first call of the callback. Examples . //To calculate product of every element of an array, var arr = new Array (1,2,3,4,5) var val = arr.reduce(function(a,b){ return a*b; }); //output =&gt; 120 . Calculate the total salary from a list of object, then you will use the reduce() like, . var employees = [ { id: 20, name: 'Ajay', salary:30000 }, { id: 24, name: 'Vijay', salary:35000 }, { id: 56, name: 'Rahul', salary:32000 }, { id: 88, name: 'Raman', salary:38000 } ]; var totalSalary= employees .reduce(function (total, record) { return total + record.salary; }, 0); //It will return the total salary of all the employees. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#reduce",
    "relUrl": "/tutorials/week1-typescript-basics.html#reduce"
  },"139": {
    "doc": "Typescript Basics",
    "title": "Filter",
    "content": "As the name suggests it can filter out the data/array elements on the basis of condition and return the result as a list. Basically, this function pushes the current element into a new array when the callback functions return true. Syntax . array.map(callback[,object]) . callback - it is a function that provides an element of the new Array from an element of the current one. object - object to use as this when executing callback. Return Type: List . Examples . //Calculate a list of even elements from an array : arr = new Array(1, 2, 3, 6, 5, 4) var newArr = arr.filter(function(record) { return record % 2 == 0; }); // output =&gt; [2,6,4] . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#filter",
    "relUrl": "/tutorials/week1-typescript-basics.html#filter"
  },"140": {
    "doc": "Typescript Basics",
    "title": "Functions",
    "content": ". | Functions usually “take in” data, process it, and “return” a result. Remember one function/method one job! . | There is a lot you can do with functions in JavaScript like assign them to variables, pass them to other functions, return them from functions, assign them to objects and prototypes, write properties to them, read those properties back, and so on, and TypeScript models all of those things with its rich type system, which we just learnt. | Typescript enables us to set the types for our function parameters and our return type. | Functions in Typescript are defined as below: . function functionName(argument1: &lt;type&gt;, defaultArgument: &lt;type&gt; = value, optionalArgument?: &lt;type&gt;): &lt;return type&gt; { // Function body } . | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#functions",
    "relUrl": "/tutorials/week1-typescript-basics.html#functions"
  },"141": {
    "doc": "Typescript Basics",
    "title": "Typing the function",
    "content": "A simple function in javascript would look like this: . // Named function function add(a, b) { return a + b; } . Now, let’s add types to our simple examples above: . function add(a: number, b: number): number { return a + b; } . You will usually explicitly annotate function parameters (a and b in this example)—TypeScript will always infer types throughout the body of your function, but in most cases it won’t infer types for your parameters. The return type is inferred, but it’s a good practice to explicitly annotate it. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#typing-the-function",
    "relUrl": "/tutorials/week1-typescript-basics.html#typing-the-function"
  },"142": {
    "doc": "Typescript Basics",
    "title": "Invoking the function",
    "content": "When you invoke a function in TypeScript, you don’t need to provide any additional type information—just pass in some arguments, and TypeScript will go to work checking that your arguments are compatible with the types of your function’s parameters: . add(1, 2); // evaluates to 3 . Of course, if you forgot an argument, or passed an argument of the wrong type, TypeScript will be quick to point it out: . add(1); // Error TS2554: Expected 2 arguments, but got 1. add(1, 'a'); // Error TS2345: Argument of type '\"a\"' is not assignable // to parameter of type 'number'. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#invoking-the-function",
    "relUrl": "/tutorials/week1-typescript-basics.html#invoking-the-function"
  },"143": {
    "doc": "Typescript Basics",
    "title": "Optional and Default Parameters",
    "content": "Like in object and tuple types, you can use ? to mark parameters as optional. When declaring your function’s parameters, required parameters have to come first, followed by optional parameters: . function log(message: string, userId?: string) { let time = new Date().toLocaleTimeString() console.log(time, message, userId || 'Not signed in') } log('Page loaded') // Logs \"12:38:31 PM Page loaded Not signed in\" log('User signed in', 'da763be') // Logs \"12:38:31 PM User signed in da763be\" . You can provide default values for optional parameters. Semantically it’s similar to making a parameter optional, in that callers no longer have to pass it in (a difference is that default parameters don’t have to be at the end of your list of parameters, while optional parameters do). For example, we can rewrite log as: . function log(message: string, userId = 'Not signed in') { let time = new Date().toISOString() console.log(time, message, userId) } log('User clicked on a button', 'da763be') log('User signed out') . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#optional-and-default-parameters",
    "relUrl": "/tutorials/week1-typescript-basics.html#optional-and-default-parameters"
  },"144": {
    "doc": "Typescript Basics",
    "title": "Rest Parameters",
    "content": "If a function takes a list of arguments, you can of course simply pass the list in as an array: . function sum(numbers: number[]): number { return numbers.reduce((total, n) =&gt; total + n, 0); } sum([1, 2, 3]); // evaluates to 6 . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#rest-parameters",
    "relUrl": "/tutorials/week1-typescript-basics.html#rest-parameters"
  },"145": {
    "doc": "Typescript Basics",
    "title": "Functions as Constructors",
    "content": "In Typescript/Javascript, Functions can be used as constructors for creating objects. This is similar to classes, but not quite the same. Examples: . function Person(firstName: string, lastName: string): void { this.firstName = firstName; this.lastName = lastName; this.getFullName = function(): string { return this.firstName + ' ' + this.lastName; } } const person1 = new Person('first', 'last'); console.log(person1.getFullName()); // Returns 'first last'. | Constructors can’t have type parameters - these belong on the outer class declaration . | Constructors can’t have return type annotations - the class instance type is always what’s returned ```ts class Point { x: number; y: number; . | . // Normal signature with defaults constructor(x = 0, y = 0) { this.x = x; this.y = y; } } . ## Arrow Functions Arrow Functions (also called fat arrow functions) are functions which have lexical 'this' and 'arguments'. This are especially useful in class methods to preserve the context when using higher order functions. Examples: ```ts let sum = (x: number, y: number): number =&gt; { return x + y; } sum(10, 20); //returns 30 . In the above example, sum is an arrow function. (x:number, y:number) denotes the parameter types, :number specifies the return type. The fat arrow =&gt; separates the function parameters and the function body. The right side of =&gt; can contain one or more code statements. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#functions-as-constructors",
    "relUrl": "/tutorials/week1-typescript-basics.html#functions-as-constructors"
  },"146": {
    "doc": "Typescript Basics",
    "title": "Function Overloads",
    "content": "In TypeScript, we can specify a function that can be called in different ways by writing overload signatures. To do this, write some number of function signatures (usually two or more), followed by the body of the function: . //function makeDate() with one parameter function makeDate(timestamp: number): Date; //function makeDate() with three parameters function makeDate(m: number, d: number, y: number): Date; //function makeDate() with one parameter and 2 default parameters function makeDate(mOrTimestamp: number, d?: number, y?: number): Date { if (d !== undefined &amp;&amp; y !== undefined) { return new Date(y, mOrTimestamp, d); } else { return new Date(mOrTimestamp); } } const d1 = makeDate(12345678); const d2 = makeDate(5, 5, 5); const d3 = makeDate(1, 3); //No overload expects 2 arguments, but overloads do exist that expect either 1 or 3 arguments. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#function-overloads",
    "relUrl": "/tutorials/week1-typescript-basics.html#function-overloads"
  },"147": {
    "doc": "Typescript Basics",
    "title": "Classes",
    "content": "Classes are blueprints for creating objects. | They can contain properties, methods, and a constructor. | All members of a class can have an access modifier: public, protected, private. | Members can also be static (shared across all instances of the class) and final (immutable). | Class properties may have getters and setters. | Classes can extend other classes. | Classes can implement interfaces. | . Creating a Class . A class definition can include the following: . | Fields − A field is any variable declared in a class. Fields represent data pertaining to objects | Constructors − Responsible for allocating memory for the objects of the class | Functions − Functions represent actions an object can take. They are also at times referred to as methods | . Examples: . class Person { private firstName: string = ''; protected middleName: string; public lastName: string = ''; private static final NeverGonnaGiveYouUp: any; protected static final NeverGonnaLetYouDown: any; public static final isRickRolled: boolean = true; constructor() { // I execute when you call new Person(). // No access modifier === public by default. // Make me private if implementing a singleton. } public anyoneCanCallMe(): void { this.childClassesCanCallMe(); } protected childClassesCanCallMe(): void { this.onlyPersonCanCallMe(); } private onlyAccessibleInsidePerson(): void { // I lied, anyone can call me if you know how. // Welcome to JavaScript :p } public get firstName(): string { return this.firstName; } public set firstName(firstName: string): void { this.firstName = firstName; } } const person = Person(); person.firstName = 'first'; console.log(person.firstName); person.anyoneCanCallMe(); class SpecialPerson extends Person { // I contain everything person has, and can extend/override it. constructor() { super() // I call the constructor for Person. } } . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#classes",
    "relUrl": "/tutorials/week1-typescript-basics.html#classes"
  },"148": {
    "doc": "Typescript Basics",
    "title": "Creating an abstract class",
    "content": ". | Define an abstract class in Typescript using the abstract keyword. Abstract classes are mainly for inheritance where other classes may derive from them. We cannot create an instance of an abstract class. | An abstract class typically includes one or more abstract methods or property declarations. The class which extends the abstract class must define all the abstract methods. | . Example: . abstract class Person { abstract name: string; display(): void{ console.log(this.name); } } class Employee extends Person { name: string; empCode: number; constructor(name: string, code: number) { super(); // must call super() this.empCode = code; this.name = name; } } let emp: Person = new Employee(\"James\", 100); emp.display(); //James . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#creating-an-abstract-class",
    "relUrl": "/tutorials/week1-typescript-basics.html#creating-an-abstract-class"
  },"149": {
    "doc": "Typescript Basics",
    "title": "Type Aliases",
    "content": "We’ve been using object types and union types by writing them directly in type annotations. This is convenient, but it’s common to want to use the same type more than once and refer to it by a single name. A type alias is exactly that - a name for any type. The syntax for a type alias is: . type Point = { x: number; y: number; }; function printCoord(pt: Point) { console.log(\"The coordinate's x value is \" + pt.x); console.log(\"The coordinate's y value is \" + pt.y); } printCoord({ x: 100, y: 100 }); . You can actually use a type alias to give a name to any type at all, not just an object type. For example, a type alias can name a union type: . type ID = number | string; . Note that aliases are only aliases - you cannot use type aliases to create different/distinct “versions” of the same type. When you use the alias, it’s exactly as if you had written the aliased type. In other words, this code might look illegal, but is OK according to TypeScript because both types are aliases for the same type: . type UserInputSanitizedString = string; function sanitizeInput(str: string): UserInputSanitizedString { return sanitize(str); } // Create a sanitized input let userInput = sanitizeInput(getInput()); // Can still be re-assigned with a string though userInput = \"new input\"; . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#type-aliases",
    "relUrl": "/tutorials/week1-typescript-basics.html#type-aliases"
  },"150": {
    "doc": "Typescript Basics",
    "title": "Interfaces",
    "content": "Interfaces are used to define contracts for interaction with external entities. If an interface has a property/method, an Object/Class which implements it must have it. Interfaces can be used to define custom types for Objects in Typescript. Examples: . //Interface IPerson respresents a person by attributes firstName and lastName and a method to getFullName() interface IPerson { firstName: string; lastName: string; getFullName(): string; } //Class Person implements interface Iperson. Person class must contains ll the attributes and methods of interface. class Person implements IPerson { public firstName: string = ''; public lastName: string = ''; public getFullName(): string { return this.firstName + ' ' + this.lastName; } // It can contain any other properties/methods but must contain those in the interface. } const person: IPerson = new Person(); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#interfaces",
    "relUrl": "/tutorials/week1-typescript-basics.html#interfaces"
  },"151": {
    "doc": "Typescript Basics",
    "title": "Custom types",
    "content": ". | For complicated types (usually required for Objects), it is recommended to use an interface. | Additionally, typescript contain the ‘type’ keyword which can be used to create new types. | This is generally used when a union of different types is required. | . Examples: . interface IStudent { name: string; age: number; studentID: number; gender: string; isEnrolled: boolean; } const student: IStudent = { name: 'name', age: 20, studentID: 111111111, gender: 'hidden' isEnrolled: true; }; type StringOrNumber = string | number; let x = 1; x = 'some string'; . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#custom-types",
    "relUrl": "/tutorials/week1-typescript-basics.html#custom-types"
  },"152": {
    "doc": "Typescript Basics",
    "title": "Generics",
    "content": ". | Generics allow us to pass different types to a function/class making it more generalized. | This will be especially useful when working with http requests. | . Examples: . function myFunc&lt;T&gt;(data: T): T { console.log(data); return data } let x: string = myFunc&lt;string&gt;('some string'); let y: number = myFunc&lt;number&gt;(5); class myClass&lt;T&gt; { } interface IMyInterface&lt;T&gt; { } . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#generics",
    "relUrl": "/tutorials/week1-typescript-basics.html#generics"
  },"153": {
    "doc": "Typescript Basics",
    "title": "Modules",
    "content": "A Module in typescript is defined by using the ‘Import’ or ‘Export’ keywords within a file. Variables declared in a module are scoped locally and are not added to the global scope. | Export makes the variables and functions from a file visible outside it. | Import allows use to use variables and functions exported by another file. | . Examples: . // file1.ts export const someVar: string = 'Variables can be exported too.'; export default function add(x: number, y: number): number { return x + y; } export function subtract(x: number, y: number): number { return x - y; } function multiply(): void { throw new Error(); } // file2.ts import add from './file1'; // curly braces are not required if export default is used. // There can be only 1 export default in a while. Use it if file has only 1 export. import { subtract } from './file1'; add(1, 2); subtract(2, 1); // multiply cannot be imported. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#modules",
    "relUrl": "/tutorials/week1-typescript-basics.html#modules"
  },"154": {
    "doc": "Typescript Basics",
    "title": "Object oriented programming concepts using typescript",
    "content": "Object Oriented Programming or OOP is a programming paradigm that has four principles which are: . | Inheritance | Polymorphism | Abstraction | Encapsulation | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#object-oriented-programming-concepts-using-typescript",
    "relUrl": "/tutorials/week1-typescript-basics.html#object-oriented-programming-concepts-using-typescript"
  },"155": {
    "doc": "Typescript Basics",
    "title": "Inheritance",
    "content": "TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes. A class inherits from another class using the ‘extends’ keyword. Child classes inherit all properties and methods except private members and constructors from the parent class. However, TypeScript doesn’t support multiple inheritance. Syntax: . class child_class_name extends parent_class_name . Example: . //Parent class Shape class Shape { Area:number constructor(a:number) { this.Area = a } } //Child class Circle that inherits properties of Shape class Circle extends Shape { disp():void { console.log(\"Area of the circle: \"+this.Area) } } var obj = new Circle(223); obj.disp() . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#inheritance",
    "relUrl": "/tutorials/week1-typescript-basics.html#inheritance"
  },"156": {
    "doc": "Typescript Basics",
    "title": "Polymorphism",
    "content": "When multiple classes inherit from a parent and override the same functionality, the result is polymorphism. Each of those child classes now implements a property or method, but they each may have their own way of performing that implementation. lternatively, one child class might override the parent’s members while another child doesn’t but just accepts the parent class’s implementation instead. This also demonstrates polymorphic behavior, since those behaviors are different between the siblings. class CheckingAccount { open(initialAmount: number) { // code to open account and save in database } } class BusinessCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt; 1000) { throw new Error(\"Business accounts must have an initial deposit of 1.000 Euros\") } super.open(initialAmount); } } class PersonalCheckingAccount extends CheckingAccount { open(initialAmount: number) { if (initialAmount &lt;= 0) { throw new Error(\"Personal accounts must have an initial deposit of more than zero Euros\") } super.open(initialAmount); } } . In the above code sample shows, the two child classes have different business rules to implement when it comes to opening an account – mainly different opening balances. Because both children have a method to open the account but both children choose to do it differently means the behavior is polymorphic. To achieve polymorphism, inherit from a base class, then override methods and write implementation code in them. In addition to overriding methods, you can overload methods to achieve polymorphism. Overloaded methods are methods that have different signatures (i.e., different data types or number of arguments) with the same name. However, in TypeScript, methods aren’t overloaded by simply modifying the types or number of arguments like in some other languages. To create an overload in TypeScript, you can either add optional arguments to a method, or overload function declarations in an interface and implement the interface. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#polymorphism",
    "relUrl": "/tutorials/week1-typescript-basics.html#polymorphism"
  },"157": {
    "doc": "Typescript Basics",
    "title": "Abstraction",
    "content": "Abstraction is a way to model objects in a system that creates a separation of duties between class or type and the code that inherits it. A developer creates a type, i.e., a class or interface, and that type specifies what the calling code should implement, but not how. So it’s the job of the abstract type to define what needs to be done, but up to the consuming types to actually do those things. To enforce abstraction, inherit or implement from abstract classes and interfaces. For example, some bank accounts have fees. You can create a Fee interface that defines a method for charging a fee. Fees don’t apply to all types of accounts, so it’s best to create an interface that can be applied to specific classes anywhere in the inheritance hierarchy. A checking account might charge fees, where its parent and sibling, the generic bank account and savings accounts might not. interface Fee { chargeFee(amount: number ); } // parent BankAccount and sibling SavingsAccount do not implement Fee interface class BankAccount { ... } class SavingsAccount extends BankAccount { ... } // checking implements Fee class CheckingAccount extends BankAccount implements Fee { chargeFee(amount: number) {} } . Children classes inherit interface members that have been implemented in their parent, so if a BusinessChecking account has inherited from the CheckingAccount class, then it inherits that implementation. // BusinessChecking inherits CheckingAccount and therefore Fee class BusinessChecking extends CheckingAccount { … } // Code that uses BusinessChecking can call chargeFee function CalculateMonthlyStatements() { let businessChecking = new BusinessChecking(); businessChecking.chargeFee(100); } . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#abstraction",
    "relUrl": "/tutorials/week1-typescript-basics.html#abstraction"
  },"158": {
    "doc": "Typescript Basics",
    "title": "Encapsulation",
    "content": "Encapsulation is a key part of Object Oriented Programming that is a way to structure code so that a certain block of code has specific access points for external code. The term for this is “visibility” or “accessibility”. Visibility defines what code from one method, property, or class can call code in another method, property, or class. In TypeScript, we enforce encapsulation with methods and properties that only allow access to data that we control. The Withdraw method below does that by doing the calculation and updating the class level _balance field. The Balance property then returns the private _balance field to the calling code. Withdraw(amount: number): boolean { if (this._balance &gt; amount) { this._balance -= amount return true; } return false; } private _balance: number; get Balance(): number { return this._balance; } . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#encapsulation",
    "relUrl": "/tutorials/week1-typescript-basics.html#encapsulation"
  },"159": {
    "doc": "Typescript Basics",
    "title": "General Guidelines",
    "content": ". | Naming conventions . | use kebab-case for file names. | Use camelCase for variable and function names. | Use PascalCase for Class and constructor function names. | . | Prefer descriptive names over random letters. | Although typing is optional in typescript, it is not optional for this course. | Always use strict equality. | Use a linter. (as specified on course website) | Use a prettifier. (If the linter doesn’t do it already) | Use general coding guidelines as discussed in Week1. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-typescript-basics.html#general-guidelines",
    "relUrl": "/tutorials/week1-typescript-basics.html#general-guidelines"
  },"160": {
    "doc": "Unit Testing with Jest",
    "title": "Understanding Unit Testing",
    "content": "At some point, every programmer has wondered why they should spend time writing test cases instead of focusing on implementing a new feature. The reason for this is that it is important! In this tutorial, we’ll go through several aspects of unit testing, with a focus on utilizing Jest. Before we get into that, let’s define unit testing and why it’s so important in the real world. Unit testing is not a new concept; it has been around for a long time. “Unit tests are often automated tests prepared and executed by software engineers to check that a portion of an application (referred to as a “unit”) matches its design and behaves as expected,” according to Wikipedia. So, to put it another way, it’s a technique to undertake rigorous testing of every single function/module in isolation. Unit testing technques: . | Black Box Testing : It is a process of validating a function’s input and output without any knowledge of it’s internal implementation details. | White Box Testing : Unlike Black Box testing, white box testing focuses on testing the specific internal code flows, uncovering any unidentified error or bug in that component. | Gray Box Testing : Gray Box testing is a combination of the two above wherein partial knowledge of the internal code is needed. This strategy lowers a tester’s reliance on a developer for every minor issue, allowing the tester to detect and resolved it alone. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#understanding-unit-testing",
    "relUrl": "/tutorials/week1-unit-testing.html#understanding-unit-testing"
  },"161": {
    "doc": "Unit Testing with Jest",
    "title": "Testing with Jest",
    "content": " ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#testing-with-jest",
    "relUrl": "/tutorials/week1-unit-testing.html#testing-with-jest"
  },"162": {
    "doc": "Unit Testing with Jest",
    "title": "Basics",
    "content": "To understand the basics of unit testing, let us look at the file called ‘calculator.ts’ present in the directory src/services/math/. This file contains a class called Calculator with a method for add() defined as shown below: . // Contents of src/services/math/calculator.ts export default class Calculator { public add(num1: number, num2: number): number { const result: number = num1 + num2; console.log(\"The result is: \", result); return result; } } . Let us write some tests for this code using jest. The test code will go into a file in the same directory titled ‘calculator.spec.ts’. Create this file now. This pattern of ‘file-name.spec.ts’ is how you should name all of your test files when using jest. All test files start with a suite. A suite is a collection of tests (or a logical grouping of tests). In jest, a suite is created by using the function describe(). The suite takes 2 arguments: the 1st being the description of the suite and the second being a callback function. Additionally, suites can be nested to form logical groups. Suites can further be broken down into 3 components that we will explore in detail shortly: . | Setup | Teardown | Test | . Syntax: . describe(\"Description of suite\", () =&gt; { // The tests go here. }); . Suites can be used to make debugging easier when you are using a large number of tests. Here is one recommended suite hierarchy: . | Top level describe should contain the file path after src. | Second describe should contain the name of the Class/File being tested. | Subsequent describe blocks should contain the name of the function being tested. | . Using this hierarchy, the test file for the above example would look as follows: . describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { // Tests for add() go here. }); }); }); . Specs . A spec is an actual test that executes some code and asserts some result. A test is created using the keyword it() or test(). Similar to describe(), it() takes 2 arguments, the first being the description of the test and the second being a callback. Generally, we want to describe what the code should do in the description of it() and assert the described behavior within the test. Each test can be broken down into 3 parts (Assemble, Act, Assert) which makes up the AAA pattern. Optionally, there may be a clean-up/teardown step after the assert. Syntax: . it(\"should check a specific behaviour\", () =&gt; {}); . Let us write a simple test for our add() method to check 1 + 1 = 2. We start by adding a spec to the suite we created previously. describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { // Assemble // Act // Assert }); }); }); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#basics",
    "relUrl": "/tutorials/week1-unit-testing.html#basics"
  },"163": {
    "doc": "Unit Testing with Jest",
    "title": "Matchers",
    "content": ".toEqual() vs .toBe() vs .toStrictEqual() . All three matchers are used to test equality, though they have slight but important differences. To understand these differences, let us take a look at the example of Store.ts with the below code. export default class Store { private static _data: any = null; public static getData(): any { return Store._data; } public static setData(data: any): void { Store._data = data; } } . | Use .toEqual() to compare recursively all properties of object instances (also known as “deep” equality). It calls Object.is to compare primitive values, which is even better for testing than ‘===’, the strict equality operator. This is the most commonly used matcher. | . describe(\"utils &gt; store\", () =&gt; { describe(\"Store\", () =&gt; { beforeEach(() =&gt; { Store[\"_data\"] = undefined; }); describe(\"setData()\", () =&gt; { it(\"should assign the input data to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store.setData(mockData); expect(Store[\"_data\"]).toEqual(mockData); }); }); describe(\"getData()\", () =&gt; { it(\"should return an object equal to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); }); }); }); }); . | Use .toBe() to compare primitive values or to check referential identity of object instances. It calls Object.is to compare values, which is even better for testing than ‘===’, the strict equality operator. | . describe(\"getData()\", () =&gt; { it(\"should return an object with a reference different to Store._data\", () =&gt; { const mockData = { key: \"value\" }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toEqual(mockData); expect(returnedValue).not.toBe(mockData); expect(Store[\"_data\"]).toBe(mockData); }); }); . | Use .toStrictEqual() to test that objects have the same types as well as structure. This checks for undefined in Objects and sparseness in Arrays. | { key: undefined } is not strictly equal to { }. | [ , 1] is not strictly equal to [undefined, 1]. | . | . it(\"should return an object strictly equal to object stored in Store._data\", () =&gt; { const mockData = { key: \"value\" }; const mockDataWithUndefined = { key: \"value\", key2: undefined }; Store[\"_data\"] = mockData; const returnedValue = Store.getData(); expect(returnedValue).toStrictEqual(mockData); expect(returnedValue).toEqual(mockDataWithUndefined); expect(returnedValue).not.toStrictEqual(mockDataWithUndefined); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#matchers",
    "relUrl": "/tutorials/week1-unit-testing.html#matchers"
  },"164": {
    "doc": "Unit Testing with Jest",
    "title": "AAA",
    "content": "Assemble . In order to run a test, we need to first assemble it. This may include creating instances of classes/variables, setting up test data for inputs, setting up spies/stubs/mocks (which will be covered in subsequest sections), or setting up the expected output. In simple cases, one may not need to assemble the test. This phase is very similar to the setup phase. In our example, let us create an instance of the Calculator class as part of assembling the test. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); // Act // Assert }); }); }); }); . Act . In this step, we actually execute the function under test with required inputs and get the returned result (if any). In our example, we will invoke the add() method with inputs (1, 1) and get the result. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); // Assert }); }); }); }); . Assert . Assertion is a statement that validates the behavior of our code by comparing the actual result against the expected results. There are many assertions provided by Jest, including some useful assertions we will use throughout our tests. Some of these assertions are listed below: . | expect(actual).toEqual(expected) // Expects both entities to have the same value. | expect(actual).toBe(expected) // Expects both entities to be the same. | expect(spy/stub/mock).toHaveBeenCalled() // Expects a function being spied/stubbed/mocked to be invoked. | expect(spy/stub/mock).toHaveBeenCalledWith([arguments]) // Expects a function being spied/stubbed/mocked to be invoked with specified arguments. | expect(actual).toBeDefined() // Expects the entity to be defined. | expect(actual).not. // Negates the assertion. Can be chained with any matchers above | await expect(error causing code returning a promise).rejects.toThrowError() // Waits for the error throwing code that returns promise (e.g. an API call) to throw the error and asserts the error was thrown. | . A full list of matchers can be found here. In our example, we can use the .toEqual() matcher. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const calculator: Calculator = new Calculator(); const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#aaa",
    "relUrl": "/tutorials/week1-unit-testing.html#aaa"
  },"165": {
    "doc": "Unit Testing with Jest",
    "title": "Setup and Teardown",
    "content": "Often in tests, we need some things to happen before a test actually runs and some things to happen after it. This may include resetting/initializing values, setting up test data, setting up spies/stubs/mocks, cleaning up variables after a test, or resetting spies/stubs/mocks. Sometimes these steps may need to be repeated for each test. This is where the setup and teardown can be especially useful. Jest Provides 2 methods for setup and 2 methods for teardown: . | beforeAll(): Runs one time before all the tests in a suite. | beforeEach(): Runs before every test in a suite. | afterEach(): Runs after every test in a suite. | afterAll(): Runs once after all tests in a suite. | . In our example, notice we created an instance of calculator in our Assemble phase. We will probably have multiple tests for the calculator that will require this instance. In order to avoid repeating this in every step, let us move this to the setup phase and add a teardown to clear this after all tests. Note: Use beforeEach()/afterEach() if the function/class stores state, and we need a clean instance for each test. In our case, calculator does not store any state, and we can share the same instance across tests with out any side effects. Hence, we will use beforeAll()/afterAll(). import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); }); }); }); . Let us add another test to cover a different scenario, such as adding negative numbers. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should return 2 when inputs are 1 and 1\", () =&gt; { const result: number = calculator.add(1, 1); expect(result).toEqual(2); }); it(\"should return -2 when inputs are -1 and -1\", () =&gt; { const result: number = calculator.add(-1, -1); expect(result).toEqual(-2); }); }); }); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#setup-and-teardown",
    "relUrl": "/tutorials/week1-unit-testing.html#setup-and-teardown"
  },"166": {
    "doc": "Unit Testing with Jest",
    "title": "Mock Testing",
    "content": "As a project grows so do the interdependencies in the project. A function under test can have dependencies from various external entities. This may include other functions, network requests, database connections, or built-in connections. Spies, Stubs, and Mocks are ways of dealing with such external dependencies. You can read more on what you can do with spies/stubs/mocks here. Spy . A spy is a watcher on a function that tracks various properties of the function being spied on. This can return information such as whether a function was invoked, how many times it was invoked, and what argument it was invoked with. A spy on a function is created using the syntax const spy = jest.spyOn(object, 'methodName'); . Note: The function being spied on actually executes. In our example, we have an external dependency on console.log(). Let us add a spy and test for it. import Calculator from \"./calculator\"; describe(\"services &gt; math\", () =&gt; { describe(\"Calculator\", () =&gt; { describe(\"add()\", () =&gt; { let calculator: Calculator; beforeAll(() =&gt; { calculator = new Calculator(); }); afterAll(() =&gt; { calculator = undefined; }); it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); }); }); }); . Mock . A mock is function which replaces an existing function. In our example, if we wanted to change the behavior of console.log() for our tests, we can do so using a mock. A mock implementation can be substituted for a spy or a jest.fn(). The syntax is as below: . spy.mockImplementation(() =&gt; { // new function body goes here. }); . Note: The function being mocked does not execute. In our example, if we wanted to replace the behavior of console.log(), we can do so as shown: . it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockImplementation(() =&gt; { // This will no longer print to console. }); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . Warning: Watch out for circular dependencies in mock implementations. Stub . A stub is a special kind of mock which does not require an alternate implementation but instead returns some value that we specify. When a stub gets invoked, it does not invoke the actual function, but returns the desired value instead. The syntax is as below: . spy.mockReturnValue(someValue); . To return a promise, we can use: . spy.mockResolvedValue(someValue); . This can be especially handy when stubbing Axios requests. Using a stub in our example simply prevents console.log() from being executed, since it does not return a value anyway. it(\"should invoke console.log() with the result 2 for inputs 1 and 1\", () =&gt; { const logSpy = jest.spyOn(window.console, \"log\"); logSpy.mockReturnValue(); const result: number = calculator.add(1, 1); expect(logSpy).toHaveBeenCalledWith(\"The result is: \", result); logSpy.mockRestore(); }); . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#mock-testing",
    "relUrl": "/tutorials/week1-unit-testing.html#mock-testing"
  },"167": {
    "doc": "Unit Testing with Jest",
    "title": "Testing Asynchronous Code",
    "content": "Promise . In previous tutorials, we have used Axios to make http requests which return promises. This is how we can write tests for axios requests. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } } . We can test the above code as follows: . // Assuming we have done the setup as in previous tests describe(\"getData()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getData(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should return the status as 200\", async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); const response = await httpService.getData(); expect(response.status).toEqual(200); getStub.mockRestore(); }); }); . Note: You can return different values for subsequent calls to a stub. Occasionally, you may run into situations where an http request is made but no promise is returned. This is often found in cases involving “fire and forget” calls or a central store with an Observable pattern implementation (e.g. Redux with react). We cannot await a function that does not return a promise. However, we can use fake timers to simulate passage of time to test such asynchronous behavior. Consider the example below: . import axios from \"axios\"; import Store from \"../../utils/store/store\"; export default class HttpService { public getData(): Promise&lt;any&gt; { return axios.get(\"/myUrl\"); } public getDataAndSetStore(): void { axios.get(\"/myUrl\").then((res) =&gt; { Store.setData(res.data); }); } } . We can test the above functionality as follows: . describe(\"getDataAndSetStore()\", () =&gt; { it('should invoke axios.get() with \"myUrl\"', async () =&gt; { const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: {} }); await httpService.getDataAndSetStore(); expect(getStub).toHaveBeenCalledWith(\"/myUrl\"); }); it(\"should set the data in store\", async () =&gt; { const addDataStub = jest.spyOn(Store, \"setData\").mockImplementation(); const getStub = jest .spyOn(axios, \"get\") .mockResolvedValue({ status: 200, data: \"myData\" }); jest.useFakeTimers(); httpService.getDataAndSetStore(); jest.runAllTimers(); await Promise.resolve(); expect(addDataStub).toHaveBeenCalledWith(\"myData\"); addDataStub.mockRestore(); getStub.mockRestore(); jest.useRealTimers(); }); }); . Callbacks . Callbacks are one of the most commonly used patterns for asynchronous programming in JavaScript/TypeScript. Consider the below callback function use case: . test('Check if I am a true husky', () =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); } fetchData(callback); }); . Here, fetchData() is a function that takes a callback and would call that callback function later in it’s implementation. Now consider 2 scenarios: . case 1: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am from Northeastern!'); }, 1000); } . case 2: . fetchData(callback) { setTimeout(()=&gt;{ callback('I am not from Northeastern!'); }, 1000); } . The test case would still pass in either of the above scenarios since fetchData() is an async function, which means the program will not wait for the call to complete. The correct way to test a callback would be using the argument done in the test like shown in below example: . test('Check if I am a true husky', (done) =&gt; { function callback(data) { expect(data).toBe('I am from Northeastern!'); done(); } fetchData(callback); }); . Now, the program would wait for done to be invoked. This implementation would correctly test both the above scenarios. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#testing-asynchronous-code",
    "relUrl": "/tutorials/week1-unit-testing.html#testing-asynchronous-code"
  },"168": {
    "doc": "Unit Testing with Jest",
    "title": "Setting up testing using Jest in VSCode",
    "content": "Testing can sometimes get cumbersome as the user is expected to remember all the options provided by Jest to run a specific set of tests, or otherwise the user will have to run the entire test suite just to verify the result of a single test case. Not anymore! . With vscode-jest, you have complete control over the way you want to run tests, with many features that visually inform the users about which specific line is failing with what error. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#setting-up-testing-using-jest-in-vscode",
    "relUrl": "/tutorials/week1-unit-testing.html#setting-up-testing-using-jest-in-vscode"
  },"169": {
    "doc": "Unit Testing with Jest",
    "title": "Features",
    "content": ". | Starts Jest automatically when you’re in a root folder project with Jest installed. | Show individual fail / passes inline. | Show fails inside the problem inspector. | Highlights the errors next to the expect functions. | Adds syntax highlighting to snapshot files. | A one button update for failed snapshots. | Show coverage information in files being tested. | Help debug jest tests in vscode. | Supports multiple test run modes (automated, manual, and hybrid onSave) to meet user’s preferred development experience. | Track and shows overall workspace/project test stats | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#features",
    "relUrl": "/tutorials/week1-unit-testing.html#features"
  },"170": {
    "doc": "Unit Testing with Jest",
    "title": "Installation",
    "content": "Direct Installation . | Open Visual Studio Code, go to the extension tab. | Search for “Jest” with the publisher name as “Orta”. | Click “Install”. | . From Visual Studio Marketplace . | Visit Jest - Visual Studio Marketplace and click “Install”. | Allow the browser to open VSCode as shown (might be different for macOS/Linux systems) by clicking on Continue. | Once VSCode is open, click on “Install”. | . Once installed, the extension should work out of the box without any extra configuration for most of the homework handouts and project starter code. You can verify the installation by checking if the following is visible to you when you open a project which has Jest configured (VSCode restart maybe required.). If restarting Jest does not work, you can run the following in your VSCode by opening VSCode’s command palette (Ctrl + Shift + P in Windows, Cmd + Shift + P in macOS) and run the following - “Jest: Start All Runners”. Additional Extensions and Libraries . If you would like to run each test individually (and all tests in test suites colledtively), VSC extenstion called “Jest Runner” will be very useful. You can also explore jest extended library that offers additional matchers for testing. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#installation",
    "relUrl": "/tutorials/week1-unit-testing.html#installation"
  },"171": {
    "doc": "Unit Testing with Jest",
    "title": "Configuration",
    "content": "As of the latest stable version, the extension is set to run all tests whenever any change is made to the files containing the tests. You can modify the behaviour to manual execution where you can run specific test cases as and when required. This can be modified by changing the \"jest.autoRun\" setting as follows - . | \"jest.autoRun\": {\"watch\": true} =&gt; will start the jest with the watch flag and leave all tests at “unknown” state until changes are detected. | \"jest.autoRun\": {\"watch\": true, \"onStartup\": [\"all-tests\"]} =&gt; will start running all tests upon project launch to update overall project test stats, followed by the jest watch for changes. | \"jest.autoRun\": \"off\" =&gt; there will be no automatic test run, users will trigger test run by either command or context-menu. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-file\"} =&gt; the extension will trigger test run for the given test file upon save. | \"jest.autoRun\": {\"watch\": false, \"onSave\": \"test-src-file\"} =&gt; the extension will trigger test run for the given test or source file upon save. | . An example of changing the extension to run in manual mode is demonstrated below - . NOTE - You will only be able to Run specific test cases as and when required only when autoRun is off. However, you’ll be able to Debug any test cases in all available modes. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#configuration",
    "relUrl": "/tutorials/week1-unit-testing.html#configuration"
  },"172": {
    "doc": "Unit Testing with Jest",
    "title": "Debugging Tests",
    "content": "Once the extension is setup and confirmed to be working, we can now begin debugging the tests. You can do so by opening the testing tab from the left sidebar in VSCode to view all the tests present in the current project. You can also navigate to the specific test file manually, and you will notice some icons/action buttons in the editor next to each test. Right clicking on the icons will bring up a test-specific context menu which will have options to debug the specific test. Be sure to place breakpoints in the specific pieces of code by clicking to the left of the line numbers. If everything is setup correctly, the debugger in VSCode will pause at the breakpoint you set and you can check the values of the variables by hovering over the said variable. ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#debugging-tests",
    "relUrl": "/tutorials/week1-unit-testing.html#debugging-tests"
  },"173": {
    "doc": "Unit Testing with Jest",
    "title": "General Guidelines For Writing Tests",
    "content": "Note: The following will be used as a reference when grading assignments. | Tests should be hermetic. | Reduce flakiness. | Flaky tests are those that fail intermittently: . | Nondeterminism (e.g., hash codes, random numbers); | Timing issues (e.g., threads, network). | Availability of Resources | . | . | Tests should be clear. | After failure, should be clear what went wrong. | . | Tests should be scoped as small as possible. | Faster and more reliable. | . | Tests should make calls against public APIs. | Or they become brittle | Brittle tests are those that are not self-contained: . | Ordering of tests (e.g., assume prior state) | . | . | . Note: The following will not be used as a reference when grading assignments. But you should try following these guidelines as much as you can. | Write tests based on the expected behavior, not based on the interpretation/implementation of it. | Test assertion (expect) should match the test description. | Each spec should test only 1 thing (preferably with 1 assertion per test). | Organize tests using suites (i.e. each method has it’s own suite). | Use setup and teardown functions to reduce code duplicity. | Code duplicity in tests is preferred over complicated logic to reduce it. | If your tests need tests, they have no value. | . | Cover the happy path for your code first. | Follow up with edge cases. | End with error scenarios. | . | Mock/Stub all external dependencies. | Clear the mocks after each test. | . | If large test data is being used, ensure clean-up after tests to prevent memory leaks. | Code coverage is a deceptive measure. 100% coverage does not mean 100% tested code. | A well designed test suite improves the quality and reliability of code. | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html#general-guidelines-for-writing-tests",
    "relUrl": "/tutorials/week1-unit-testing.html#general-guidelines-for-writing-tests"
  },"174": {
    "doc": "Unit Testing with Jest",
    "title": "Unit Testing with Jest",
    "content": "This tutorial covers the basics on unit testing with Jest. By the end of this tutorial, you will have an introduction to unit testing with jest, best practices, and some handy tricks and tips to use in your tests. Starter code is available here, and finished code with tests covered in this tutorial can be found here. We strongly recommend using the completed solution only for reference and implementing the tutorial step by step from the starter code. Contents: . | Understanding Unit Testing | Testing with Jest . | Basics . | Specs | . | Matchers . | .toEqual() vs .toBe() vs .toStrictEqual() | . | AAA . | Assemble | Act | Assert | . | Setup and Teardown | Mock Testing . | Spy | Mock | Stub | . | Testing Asynchronous Code . | Promise | Callbacks | . | . | Setting up testing using Jest in VSCode . | Features | Installation . | Direct Installation | From Visual Studio Marketplace | Additional Extensions and Libraries | . | Configuration | Debugging Tests | . | General Guidelines For Writing Tests | . ",
    "url": "/martinjkellogg.com/teaching/cs490-au25/tutorials/week1-unit-testing.html",
    "relUrl": "/tutorials/week1-unit-testing.html"
  }
}
